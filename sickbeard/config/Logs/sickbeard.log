2018-10-01 11:28:05 INFO     MAIN :: Checking database structure...
2018-10-01 11:28:05 DEBUG    MAIN :: Checking Initial Schema database upgrade
2018-10-01 11:28:05 DEBUG    MAIN :: sickbeard.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('tv_shows',)
2018-10-01 11:28:05 INFO     MAIN :: Database upgrade required: Initial Schema
2018-10-01 11:28:05 DEBUG    MAIN :: sickbeard.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('tv_shows',)
2018-10-01 11:28:05 DEBUG    MAIN :: sickbeard.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('db_version',)
2018-10-01 11:28:05 DEBUG    MAIN :: sickbeard.db: CREATE TABLE db_version (db_version INTEGER);
2018-10-01 11:28:05 DEBUG    MAIN :: sickbeard.db: CREATE TABLE history (action NUMERIC, date NUMERIC, showid NUMERIC, season NUMERIC, episode NUMERIC, quality NUMERIC, resource TEXT, provider TEXT, source TEXT);
2018-10-01 11:28:06 DEBUG    MAIN :: sickbeard.db: CREATE TABLE info (last_backlog NUMERIC, last_tvdb NUMERIC);
2018-10-01 11:28:06 DEBUG    MAIN :: sickbeard.db: CREATE TABLE tv_episodes (episode_id INTEGER PRIMARY KEY, showid NUMERIC, tvdbid NUMERIC, name TEXT, season NUMERIC, episode NUMERIC, description TEXT, airdate NUMERIC, hasnfo NUMERIC, hastbn NUMERIC, status NUMERIC, location TEXT, file_size NUMERIC, release_name TEXT);
2018-10-01 11:28:06 DEBUG    MAIN :: sickbeard.db: CREATE TABLE tv_shows (show_id INTEGER PRIMARY KEY, location TEXT, show_name TEXT, tvdb_id NUMERIC, network TEXT, genre TEXT, runtime NUMERIC, quality NUMERIC, airs TEXT, status TEXT, flatten_folders NUMERIC, paused NUMERIC, startyear NUMERIC, tvr_id NUMERIC, tvr_name TEXT, air_by_date NUMERIC, lang TEXT, last_update_tvdb NUMERIC, rls_require_words TEXT, rls_ignore_words TEXT, skip_notices NUMERIC);
2018-10-01 11:28:06 DEBUG    MAIN :: sickbeard.db: CREATE INDEX idx_tv_episodes_showid_airdate ON tv_episodes (showid,airdate);
2018-10-01 11:28:06 DEBUG    MAIN :: sickbeard.db: CREATE INDEX idx_showid ON tv_episodes (showid);
2018-10-01 11:28:06 DEBUG    MAIN :: sickbeard.db: CREATE UNIQUE INDEX idx_tvdb_id ON tv_shows (tvdb_id);
2018-10-01 11:28:06 DEBUG    MAIN :: sickbeard.db: INSERT INTO db_version (db_version) VALUES (18);
2018-10-01 11:28:06 DEBUG    MAIN :: Initial Schema upgrade completed
2018-10-01 11:28:06 DEBUG    MAIN :: Checking Add Size And Scene Name Fields database upgrade
2018-10-01 11:28:06 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
2018-10-01 11:28:06 DEBUG    MAIN :: Add Size And Scene Name Fields upgrade not required
2018-10-01 11:28:06 DEBUG    MAIN :: Checking Rename Season Folders database upgrade
2018-10-01 11:28:06 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
2018-10-01 11:28:06 DEBUG    MAIN :: Rename Season Folders upgrade not required
2018-10-01 11:28:06 DEBUG    MAIN :: Checking Add1080p And Raw Qualities database upgrade
2018-10-01 11:28:06 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
2018-10-01 11:28:06 DEBUG    MAIN :: Add1080p And Raw Qualities upgrade not required
2018-10-01 11:28:06 DEBUG    MAIN :: Checking Add Showid Tvdbid Index database upgrade
2018-10-01 11:28:06 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
2018-10-01 11:28:06 DEBUG    MAIN :: Add Showid Tvdbid Index upgrade not required
2018-10-01 11:28:06 DEBUG    MAIN :: Checking Add Last Update database upgrade
2018-10-01 11:28:06 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
2018-10-01 11:28:06 DEBUG    MAIN :: Add Last Update upgrade not required
2018-10-01 11:28:06 DEBUG    MAIN :: Checking Add Require And Ignore Words database upgrade
2018-10-01 11:28:06 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
2018-10-01 11:28:06 DEBUG    MAIN :: Add Require And Ignore Words upgrade not required
2018-10-01 11:28:06 DEBUG    MAIN :: Checking Cleanup History And Specials database upgrade
2018-10-01 11:28:06 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
2018-10-01 11:28:06 DEBUG    MAIN :: Cleanup History And Specials upgrade not required
2018-10-01 11:28:06 DEBUG    MAIN :: Checking Add Skip Notifications database upgrade
2018-10-01 11:28:06 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
2018-10-01 11:28:06 DEBUG    MAIN :: Add Skip Notifications upgrade not required
2018-10-01 11:28:06 DEBUG    MAIN :: Checking Add History Source database upgrade
2018-10-01 11:28:06 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
2018-10-01 11:28:06 DEBUG    MAIN :: Add History Source upgrade not required
2018-10-01 11:28:06 INFO     MAIN :: Checking database structure...
2018-10-01 11:28:06 DEBUG    MAIN :: Checking Initial Schema database upgrade
2018-10-01 11:28:06 DEBUG    MAIN :: cache.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('lastUpdate',)
2018-10-01 11:28:06 INFO     MAIN :: Database upgrade required: Initial Schema
2018-10-01 11:28:06 DEBUG    MAIN :: cache.db: CREATE TABLE lastUpdate (provider TEXT, time NUMERIC);
2018-10-01 11:28:06 DEBUG    MAIN :: cache.db: CREATE TABLE db_version (db_version INTEGER);
2018-10-01 11:28:06 DEBUG    MAIN :: cache.db: INSERT INTO db_version (db_version) VALUES (?) with args (1,)
2018-10-01 11:28:06 DEBUG    MAIN :: Initial Schema upgrade completed
2018-10-01 11:28:06 DEBUG    MAIN :: Checking Add Scene Exceptions database upgrade
2018-10-01 11:28:06 DEBUG    MAIN :: cache.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('scene_exceptions',)
2018-10-01 11:28:06 INFO     MAIN :: Database upgrade required: Add Scene Exceptions
2018-10-01 11:28:06 DEBUG    MAIN :: cache.db: CREATE TABLE scene_exceptions (exception_id INTEGER PRIMARY KEY, tvdb_id INTEGER KEY, show_name TEXT, provider TEXT)
2018-10-01 11:28:06 DEBUG    MAIN :: Add Scene Exceptions upgrade completed
2018-10-01 11:28:06 DEBUG    MAIN :: Checking Add Scene Name Cache database upgrade
2018-10-01 11:28:06 DEBUG    MAIN :: cache.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('scene_names',)
2018-10-01 11:28:06 INFO     MAIN :: Database upgrade required: Add Scene Name Cache
2018-10-01 11:28:06 DEBUG    MAIN :: cache.db: CREATE TABLE scene_names (tvdb_id INTEGER, name TEXT)
2018-10-01 11:28:07 DEBUG    MAIN :: Add Scene Name Cache upgrade completed
2018-10-01 11:28:07 DEBUG    MAIN :: Checking Add Scene Exceptions Provider database upgrade
2018-10-01 11:28:07 DEBUG    MAIN :: Add Scene Exceptions Provider upgrade not required
2018-10-01 11:28:07 DEBUG    MAIN :: sickbeard.db: SELECT show_id, tvdb_id, COUNT(tvdb_id) as count FROM tv_shows GROUP BY tvdb_id HAVING count > 1
2018-10-01 11:28:07 INFO     MAIN :: No duplicate show, check passed
2018-10-01 11:28:07 DEBUG    MAIN :: sickbeard.db: SELECT showid, season, episode, COUNT(showid) as count FROM tv_episodes GROUP BY showid, season, episode HAVING count > 1
2018-10-01 11:28:07 INFO     MAIN :: No duplicate episode, check passed
2018-10-01 11:28:07 DEBUG    MAIN :: sickbeard.db: SELECT episode_id, showid, tv_shows.tvdb_id FROM tv_episodes LEFT JOIN tv_shows ON tv_episodes.showid=tv_shows.tvdb_id WHERE tv_shows.tvdb_id is NULL
2018-10-01 11:28:07 INFO     MAIN :: No orphan episodes, check passed
2018-10-01 11:28:07 DEBUG    MAIN :: config_version -> 6
2018-10-01 11:28:07 DEBUG    MAIN :: Checking if we can use git commands: git version
2018-10-01 11:28:07 DEBUG    MAIN :: Executing git version with your shell in /app/sickbeard
2018-10-01 11:28:07 DEBUG    MAIN :: git output: git version 2.13.5
2018-10-01 11:28:07 DEBUG    MAIN :: git version : returned successful
2018-10-01 11:28:07 DEBUG    MAIN :: Using: git
2018-10-01 11:28:07 DEBUG    MAIN :: Executing git symbolic-ref -q HEAD with your shell in /app/sickbeard
2018-10-01 11:28:07 DEBUG    MAIN :: git output: refs/heads/development
2018-10-01 11:28:07 DEBUG    MAIN :: git symbolic-ref -q HEAD : returned successful
2018-10-01 11:28:07 DEBUG    MAIN :: Retrieving the last check time from the DB
2018-10-01 11:28:07 DEBUG    MAIN :: sickbeard.db: SELECT * FROM info
2018-10-01 11:28:07 INFO     MAIN :: Starting Sick Beard on http://0.0.0.0:8081/
2018-10-01 11:28:07 INFO     MAIN :: Loading initial show list
2018-10-01 11:28:07 DEBUG    MAIN :: sickbeard.db: SELECT * FROM tv_shows
2018-10-01 11:28:07 DEBUG    CHECKVERSION :: Starting new thread: CHECKVERSION
2018-10-01 11:28:07 INFO     CHECKVERSION :: Checking if git needs an update
2018-10-01 11:28:07 DEBUG    CHECKVERSION :: Executing git rev-parse HEAD with your shell in /app/sickbeard
2018-10-01 11:28:07 DEBUG    CHECKVERSION :: git output: 171a607e41b7347a74cc815f6ecce7968d9acccf
2018-10-01 11:28:07 DEBUG    CHECKVERSION :: git rev-parse HEAD : returned successful
2018-10-01 11:28:07 DEBUG    CHECKVERSION :: Executing git fetch origin with your shell in /app/sickbeard
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: git output: 
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: git fetch origin : returned successful
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: Executing git rev-parse --verify --quiet "@{upstream}" with your shell in /app/sickbeard
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: git output: 171a607e41b7347a74cc815f6ecce7968d9acccf
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: git rev-parse --verify --quiet "@{upstream}" : returned successful
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: Executing git rev-list --left-right "@{upstream}"...HEAD with your shell in /app/sickbeard
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: git output: 
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: git rev-list --left-right "@{upstream}"...HEAD : returned successful
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: cur_commit = 171a607e41b7347a74cc815f6ecce7968d9acccf, newest_commit = 171a607e41b7347a74cc815f6ecce7968d9acccf, num_commits_behind = 0, num_commits_ahead = 0
2018-10-01 11:28:08 INFO     CHECKVERSION :: No update needed
2018-10-01 11:28:08 INFO     CHECKVERSION :: Check scene exceptions update
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: cache.db: SELECT tvdb_id, show_name FROM scene_exceptions WHERE provider=?; with args ['sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 INFO     CHECKVERSION :: Updating scene exceptions
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [272391, u'Karl Pilkington The Moaning Of Life', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [264535, u'Storage Wars NY', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [247824, u'The Voice (US)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [247824, u'The Voice', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [276498, u'Raised By Wolves UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [71699, u'The Outer Limits (1963)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [253982, u'Common Law (2012)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [253982, u'Common Law', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [79905, u'Tim and Eric Awesome Show', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [79905, u'Tim and Erics Awesome Show Great Job', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [276515, u'Curse of Oak Island', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [249892, u'Extreme Chef', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [249892, u'Extreme Chefs', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [276526, u'Legend of Mick Dodge', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [244061, u'Steins Gate', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [290865, u'Salem Rogers Model Of The Year 1998', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [294973, u'Home Fires UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [260165, u'Chasing UFOs', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [260165, u'National Geographic Chasing UFOs', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [248503, u'The Hour (2011)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [248503, u'The Hour UK 2011', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [248503, u'The Hour 2011', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [78973, u'Ken Burns The Civil War', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [273424, u'David Attenboroughs Rise Of Animals', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [71788, u'Superman: The Animated Series', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [71788, u'Superman TAS', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [260206, u'Gordon Behind Bars', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [260206, u'Gordon Ramsay Behind Bars', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [254067, u'DUI', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [254067, u'D U I', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [254067, u'D.U.I', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [249980, u'Restoration Home', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [249980, u'Restoration Home UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [280939, u'Rush US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [145541, u'The Marriage Ref', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [145541, u'The Marriage Ref US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [82060, u'Who Do You Think You Are AU', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [281624, u'Manhattan Love Story US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [80018, u'Nick Cannon Presents Wild N Out', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [266388, u'David Attenboroughs Natural Curiosities', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [264347, u'Ghost Inside My Child', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [250015, u'The Indestructibles', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [250015, u'The Indestructibles US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [254112, u'Titanic 2012', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [282786, u'Utopia AU', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [73893, u'Enterprise', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [84146, u'Secret Millionaire', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [84146, u'Secret Millionaire US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [282654, u'Utopia US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [198841, u'Undercover Boss (Au)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [198841, u'Undercover Boss Australia', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [194751, u'Conan', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [194751, u'Conan (2010)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [270528, u'Blood And Oil 2013', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [288963, u'The Royals', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [92361, u'Known Universe', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [92361, u'National Geographic Known Universe', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [256204, u'666 Park Avenue', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [256204, u'Park Avenue', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [198861, u'Film 2014 with Claudia Winkleman', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [198861, u'Film 2013 with Claudia Winkleman', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [198861, u'Film 2012 with Claudia Winkleman', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [198861, u'Film 2011 with Claudia Winkleman', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [255693, u'Undercover Boss Canada', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [255693, u'Undercover Boss CA', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [262353, u'Leaving', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [262353, u'Leaving UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [317654, u'The Tick', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [82135, u'The Gruen Transfer', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [82135, u'Gruen Nation', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [82135, u'Gruen Sweat', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [139481, u'18 Kids And Counting', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [139481, u'17 Kids And Counting', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [213211, u'Love Hate', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [262368, u'Vikings (2012)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [262368, u'Vikings UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [168161, u'Law & Order: Los Angeles', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [168161, u'Law & Order: LA', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [78051, u'Never Mind the Buzzcocks', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [78051, u'Never Mind the Buzzcocks UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [80101, u'Harry And Paul', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [283345, u'Sex and Drugs and Rock and Roll', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [82152, u'Engrenages', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [82152, u'Spiral 2005', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [262377, u'Sarah Beenys Double Your House for Half the Money', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [129261, u'Spartacus', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [129261, u'Spartacus Blood and Sand', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [129261, u'Spartacus Vengeance', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [250095, u'The Marriage Ref(UK)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [250095, u'The Marriage Ref UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [78075, u'Beast Machines Transformers', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [88321, u"Tabatha's Salon Takeover", 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [264450, u'Legit', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [264450, u'Legit US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [82186, u'The Comedy Central Roast of', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [82186, u'Comedy Central Roast', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [82186, u'The Comedy Central Roast', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [80159, u'Sanctuary', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [80159, u'Sanctuary US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [196901, u'Grand Designs AU', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [250153, u'Top Design Australia', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [250153, u'Top Design AU', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [256300, u'Richard Hammonds Crash Course', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [256300, u"Richard Hammond's Crash Course", 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [78125, u'22 Minutes', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [268591, u'The Tomorrow People US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [268591, u'The Tomorrow People', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [268591, u'Tomorrow People', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [71985, u'Taboo', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [71985, u'National Geographic Taboo', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [128051, u'30 for 30', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [260489, u'National Geographic Caught In The Act', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [71998, u'Jimmy Kimmel Live', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [71998, u'Jimmy Kimmel', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [76104, u'The Mole AU', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [76107, u'Doctor Who Classic', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [94551, u'Parenthood (2010)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [94551, u'Parenthood', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [94551, u'Parenthood 2010', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [84312, u'Click (2000)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [84312, u'Click UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [172381, u'Silent Library (US)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [80226, u'Inspector George Gently', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [80226, u'George Gently', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [76133, u'Poirot', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [76133, u"Agatha Christie's Poirot", 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [76133, u'Agatha Christie Poirot', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [280937, u'Satisfaction US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [166251, u'Four Corners', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [280949, u'Brandi and Jarrod-Married to the Job', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [199031, u'Click and Clack As the Wrench Turns', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [281664, u'Partners 2014', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [76119, u'NOVA', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [76119, u'PBS NOVA', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [291206, u'Broke-Ass Game Show', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [76168, u'Batman: The Animated Series', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [76168, u'Batman: TAS', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [197001, u'Supernatural The Animation', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [197001, u'Supernatural: TAS', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [256394, u'Lab Rats', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [252312, u'Jessie', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [250267, u'The Food Truck NZ', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [252319, u"Dragons' Den: How To Win In The Den", 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [252319, u'How to win in the Den', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [139681, u"The Smoking Gun Presents: The World's Dumbest", 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [139681, u"World's Dumbest", 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [80290, u'Jamie Oliver Jamies Kitchen', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [278976, u'The Comic Artist and His Assistants', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [283073, u'Fat N Furious-Rolling Thunder', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [116811, u'Dragons Den CA', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [248261, u'National Terrorism Strike Force: San Diego: Sport Utility Vehicle', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [248261, u'National Terrorism Strike Force: San Diego: SUV', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [248261, u'NTSF:SD:SUV::', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [248261, u'NTSF SD SUV', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [82374, u'Ultimate Factories', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [82374, u'National Geographic Ultimate Factories', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [311713, u'Timeless', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [76235, u"America's Funniest Home Videos", 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [76235, u'AFHV', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [76237, u'Big Brother (Australia)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [76237, u'Big Brother AU', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72150, u'BBC Later With Jools Holland', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [250331, u"Richard Hammond's Journey To...", 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [250331, u'Richard Hammonds Journey To', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [82402, u'Hard Knocks', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [82402, u'Hard Knocks Houston Texans', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72164, u'The O.C.', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72164, u'The OC', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [264679, u'National Geographic UFO Europe Untold Stories', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [260586, u'Cosmos A Space Time Odyssey', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [294417, u'Scream The TV Series', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [80379, u'The Big Bang Theory', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [80379, u'Big Bang Theory', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [80379, u'TBBT', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [90621, u'Discovery Channel Sunrise Earth', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [90621, u'Sunrise Earth', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [270849, u'I Didnt Do It', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72194, u'The Ellen Degeneres Show', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72194, u'Ellen Degeneres', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [287236, u'American Supernatural', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [246281, u'King', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [246281, u'King (2011)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [295438, u'Shark UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [82448, u'Project Runway Australia', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [82448, u'Project Runway AU', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [311833, u'Making History', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [311833, u'Making History US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [90651, u'Selling Houses Australia', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [90651, u'Selling Houses Australia Extreme', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [273005, u'Ace of The Diamond', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72224, u'The Outer Limits (1995)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72224, u'The Outer Limits: TNS', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72224, u'The Outer Limits: The New Series', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [82467, u'Eastbound Down', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [82467, u'Eastbound and Down', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [297509, u'Blue Collar Millionares', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72231, u'Real Time with Bill Maher', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72231, u'Real Time With Bill Maher Plus Overtime', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [74281, u'Have I Got News for You Uncut', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [88631, u'Krod Mandoon', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [275120, u'Bordertown US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [283196, u'Married at First Sight US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [311878, u'Conviction', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [264776, u'Adam Hills In Gordon St Tonight', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [250445, u'The Renovators', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [250445, u'The Renovators AU', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [311892, u'Taken', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [174681, u'Scooby-Doo! Mystery Incorporated', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [174681, u'Scooby Doo Mystery Incorporated', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [311898, u'Time After Time US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [349659, u'Mayans MC', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [275039, u'Sailor Moon Crystal', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [164451, u'Carlos (2010)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [270948, u'Morgan Spurlock Inside Man', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [273002, u'I Couldnt Become a Hero So I Reluctantly Decided to Get a Job', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72301, u'Penn and Teller Bullshit', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72306, u'The Venture Brothers', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [90751, u'Travel Channel Planet Food', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [262787, u'Homefront UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [74372, u'Blue Planet', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [281708, u'Proof US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [281708, u'Proof', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [80522, u'Who Do You Think You Are?', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [80522, u'Who Do You Think You Are UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [311954, u'Riverdale US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [283291, u'Beyonce X10 The Mrs Carter Show World Tour', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [250525, u'Hamish And Andys Gap Year', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [250525, u'Hamish And Andys Euro Gap Year', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [139941, u'Childrens Hospital (US)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [139941, u'Childrens Hospital', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [80552, u'Kitchen Nightmares (US)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [80552, u'Kitchen Nightmares US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [328361, u'Happy', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [168621, u'Melissa & Joey', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [168621, u'Melissa and Joey', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [250544, u'Match of the Day Two', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [277169, u'Faking It 2014', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [277171, u'Tough Young Teachers UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [70327, u'Buffy the Vampire Slayer', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [70327, u'Buffy', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [291517, u'Agent X US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [70336, u'The Tonight Show with Jay Leno', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [70336, u'Jay Leno', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [88771, u"The Apprentice: You're Fired!", 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [88771, u'The Apprentice UK Youre Fired', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [88771, u'The Apprentice UK Your Fired', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [88771, u'The Apprentice Youre Fired', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [281467, u'Matador US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [131791, u'Sci-Fi Science', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [131791, u'Sci-Fi Science: Physics of the Impossible', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [131791, u'Sci Fi Science Physics of the Impossible', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [281297, u'BikerLive', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [258773, u'Zero Hour US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [295642, u'The Player 2015', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [260839, u'MasterChef Allstars AU', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [338664, u'Instinct US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [297084, u'Not Safe for Work UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [293614, u'Guardians of the Galaxy', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72829, u'The Apprentice', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72829, u'The Apprentice US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [80625, u'MegaStructures', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [80625, u'National Geographic Megastructures', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72449, u'Stargate SG1', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [80646, u'Frontline (US)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [80646, u'Frontline US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [314544, u'Travelers', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [262927, u"Ian Hislop's Stiff Upper Lip", 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [262927, u'Ian Hislops Stiff Upper Lip An Emotional History Of Britain', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [74512, u'Wife Swap (US)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [299139, u'The Magicians US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [299139, u'The Magicians 2016', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [248596, u'Atlantis', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [80665, u'The Next Iron Chef Redemption', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [105251, u'Q and A AU', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [289574, u'The Late Show with Stephen Colbert', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [289574, u'Stephen Colbert', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [248618, u'The Amazing Race Australia', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [248618, u'The Amazing Race AU', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [285507, u'The Code AU', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [262980, u'House of Cards 2013', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [254798, u'Stella (2012)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [254798, u'Stella UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [263002, u'Switch (2012)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [263002, u'Switch UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [322399, u'Genius', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72546, u'CSI', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72549, u'Big Brother UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72553, u'Mighty Morphin Power Rangers', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72553, u'Power Rangers Zeo', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72553, u'Power Rangers Turbo', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72553, u'Power Rangers in Space', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72553, u'Power Rangers Lost Galaxy', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72553, u'Power Rangers Ninja Storm', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72553, u'Power Rangers Operation Overdrive', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72553, u'Power Rangers Samurai', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72553, u'Power Rangers Super Samurai', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72553, u'Power Rangers Megaforce', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72553, u'Power Rangers Super Megaforce', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72553, u'Power Rangers Dino Charge', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [140141, u'Undercover Boss (US)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [140141, u'Undercover Boss US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [74608, u'Top Gear UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [248699, u'24 Hours In A And E', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [74626, u'The X Factor', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [74626, u'The X Factor UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [271241, u'Deal With It US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [258959, u'Beauty and the Beast', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [81391, u'Wie is de mol?', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [81391, u'Wie is de mol', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [81391, u'widm', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [295837, u'Shadowhunters The Mortal Instruments', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [76703, u'Pokemon', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [76706, u'Big Brother (US)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [281511, u'Blackish', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [70572, u'Little Rascals', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [70572, u'The Little Rascals', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [70578, u'Highway Patrol', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [70578, u'Highway Patrol (AU)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [73545, u'Battlestar Galactica', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [238521, u'Adam Eva', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [281535, u'Forever US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [76736, u'The Black Adder', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [76736, u'BlackAdder', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [280736, u'The Game UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [166851, u'Noise Control (NZ)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [267206, u'Low Winter Sun US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [78804, u'Doctor Who 2005', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [248789, u'Smash (2012)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [248789, u'Smash', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [187351, u'This is England', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [187351, u'This is England 86', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [187351, u'This is England 88', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [187351, u'This is England 90', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [193501, u'XIII', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [193501, u'XIII (2011)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [193501, u'XIII The Series (2011)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [84133, u'Manhunters: Fugitive Task Force', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [84133, u'Manhunters - Fugitive Task Force', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [230371, u'David Attenborough Madagascar', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [82918, u'Diners, Drive-ins and Dives', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [82918, u'Diners Drive ins and Dives', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [82918, u'Diners Driveins and Dives', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [273383, u'The House That 100k Built', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [76779, u'WWE Monday Night RAW', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [248812, u'Dont Trust the Bitch in Apartment 23', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [248812, u'Apartment 23', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [220141, u'Wolverine', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [220141, u'Wolverine 2011', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [283630, u'Doraemon US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [263160, u'Mind of a Chef', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [267260, u'Intelligence US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [175101, u'Travel Channel Culture Shock', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [78846, u'Shameless UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [248834, u'Last Man Standing (2011)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [248834, u'Last Man Standing US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [248834, u'Last Man Standing', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [248835, u'Once Upon a Time (2011)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [248835, u'Once Upon a Time', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [248836, u'The River', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [76808, u'Whose Line is it Anyway US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [248841, u'Scandal US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72716, u'QI XL', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72716, u'BBC QI XL', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72716, u'BBC QI XL (Quite Interesting)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72716, u'BBC QI', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72716, u'BBC QI (Quite Interesting)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [281613, u'American Crime', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [74768, u'The Block', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [74768, u'The Block AU', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [74768, u'The Block All Stars', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [74768, u'The Block All Stars AU', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [74768, u'The Block AU All Stars', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [74768, u'The Block AU Sky High', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [74768, u'The Block AU Fans vs Faves', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [74768, u'The Block AU Glasshouse', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [74768, u'The Block Triple Threat', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [76817, u'The Ponderosa', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [80915, u'La Linea 1972', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [277528, u'Love Child AU', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [281776, u'Youre the Worst', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [259106, u'Emily Owens M D', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [259106, u'Emily Owens MD', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [265252, u'MasterChef Australia The Professionals', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [275493, u'Backchat With Jack Whitehall And His Dad', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [105521, u'The Colony', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [105521, u'The Colony (US)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [279603, u'The Face AU', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [74806, u'MST3K', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [84489, u'Masterchef', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [84489, u'MasterChef UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [271421, u'Clarence US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [277568, u'Babylon', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [252019, u'The Bridge 2011', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [80964, u'Yo Gabba Gabba', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [255045, u'The L.A. Complex', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [255045, u'The LA Complex', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [70726, u'Babylon 5', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [70726, u'Babylon5', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [277580, u'30 For 30 Soccer Stories', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [205901, u'Transformers Prime', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [205901, u'Transformers Prime Beast Hunters', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [261202, u'DreamWorks Dragons: Riders of Berk', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [261202, u'Dragons Riders of Berk', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [261202, u'DreamWorks Dragons Riders of Berk', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [261202, u'Dragons Defenders of Berk', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [261202, u'Dreamworks Dragons', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [164951, u'Shit My Dad Says', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [80994, u'National Geographic Channel Naked Science', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [80994, u'National Geographic Naked Science', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [156771, u'National Geographic Shark Men', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [78949, u'Thomas The Tank Engine & Friends', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [78949, u'Thomas And Friends', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [261222, u'The Burn With Jeff Ross', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [261222, u'Jeff Ross', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [248935, u'Touch (2012)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [248935, u'Touch', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [70760, u'Celebrity Big Brother', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [70760, u'Celebrity Big Brother UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [279659, u'StarTalk', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [78956, u'So You Think You Can Dance US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [281709, u'The Librarians US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [283761, u'Kingdom', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [261240, u'H+', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [261240, u'H', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [76925, u'Dark Shadows The Revival Series 1991', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [306304, u'Lemony Snickets A Series of Unfortunate Events', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [248962, u'Transporter The Series', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [74897, u'Hells Kitchen US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [74897, u'Hells Kitchen', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [265373, u'David Attenboroughs Galapagos', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [120541, u'Russell Howards Good News', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [120541, u'Russell Howards Good News (UK)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [271525, u'WWE Total Divas', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [83115, u'The Worlds Strictest Parents UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [298156, u'ConMan', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [85168, u'How the Earth Was Made', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [85168, u'History channel How the Earth Was Made', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [265393, u'The Legends of Chima', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [83123, u'Merlin', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [83123, u'Merlin (2008)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [271902, u'Legend of Shelby The Swamp Man', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [298167, u'HBO Documentaries SEX ON', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [298167, u'Sex On', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [265406, u'Out There 2013', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [79040, u'Britains Next Top Model', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [79040, u'Britain and Irelands Next Top Model', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [74946, u'C O P S', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [263365, u'Marvels Agents of S H I E L D', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [263365, u'Marvel Agents Of SHIELD', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [263365, u'Agents of S H I E L D', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [212171, u'My Little Pony: Friendship is Magic', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [212171, u'My Little Pony Friendship is Magic', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [292044, u'Critical UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [273616, u'Pokemon Origins', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [95441, u'NCIS: Los Angeles', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [95441, u'NCIS LA', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [70870, u'The Real World Road Rules Challenge', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [70870, u'The Challenge Cutthroat', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [70870, u'The Challenge Battle Of The Exes', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [70870, u'The Challenge Rivals', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [70870, u'The Challenge Battle Of The Seasons 2', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [70870, u'The Challenge Rivals II', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [70870, u'The Challenge Rivals 2', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [70870, u'The Challenge Free Agents', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [70870, u'The Challenge Battle Of The Exes 2', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [263387, u'Cedar Cove', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [269538, u'Satisfaction CA', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [279779, u'Sensitive Skin CA', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [284881, u'My Kitchen Rules New Zealand', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [85228, u'Law & Order: UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [85228, u'Law and Order UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [113901, u'The Super Hero Squad Show', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [113901, u'The Super Hero Squad', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [208111, u'Gold Rush', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [208111, u'Gold Rush: Alaska', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [118001, u'Beauty and the Geek Australia', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [118001, u'Beauty and the Geek AU', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [290038, u'Troy-Street Magic', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [195831, u"Zane Lamprey's Drinking Made Easy", 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [210171, u'The Killing (2011)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [210171, u'The Killing', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [152831, u'Adventure Time with Finn and Jake', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [275723, u'Panic Button US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [269584, u'Rake US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [269586, u'Brooklyn Nine Nine', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [269589, u'Dads', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [267542, u'Naked and Marooned with Ed Stafford', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [267543, u'Hulk and the Agents of S M A S H', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [267543, u'Hulk and the Agents of SMASH', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [75032, u'Cathouse The Series', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [75032, u'CatHouse', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [220441, u'R L Stines The Haunting Hour The Series', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [220441, u'R L Stines The Haunting Hour', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [220441, u"R.L. Stine's The Haunting Hour The Series", 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [193821, u'Iron Man 2010', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [193821, u'Iron Man 2011', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [95521, u'National Geographic Ancient Megastructures', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [269602, u'Reign', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [292157, u'Taboo UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [77120, u'Aqua Teen Hunger Force', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [77120, u'Aqua Unit Patrol Squad', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [77120, u'Aqua Unit Patrol Squad 1', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [77120, u'Aqua Something You Know Whatever', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [275777, u'Wild Burma', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [83268, u'Star Wars The Clone Wars 2008', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [83268, u'Star Wars The Clone Wars', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [269637, u'The Michael J Fox Show', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [269641, u'Chicago P D', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [269641, u'Chicago PD', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [268855, u'Turbo FAST', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [81230, u'Celebrity Rehab with Dr Drew', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [75088, u'David Letterman', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [269650, u'Resurrection US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [269651, u'Mind Games', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [269653, u'The Goldbergs', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [222551, u'Only in America With Larry the Cable Guy', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [222551, u'Only in America', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [259418, u'David Attenborough Kingdom Of Plants', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [273761, u'Master Chef Canada', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [83299, u'Magics Biggest Secrets Finally Revealed', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [314599, u'Divorce', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [79212, u'The Dog Whisperer', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [79212, u'Dog Whisperer', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [296301, u'The Seventies', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [314087, u'The Grand Tour (2016)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [314087, u'The Grand Tour', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [271728, u'Pete Holmes Show', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [290176, u'The Comedians US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [253323, u'Ninjago Masters Of Spinjitzu', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [253323, u'LEGO NinjaGo: Masters of Spinjitzu', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [253323, u'Ninjago Masters of Spinjitzu The Tournament of Elements', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [253323, u'Ninjago Masters of Spinjitzu Posession', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [249229, u'A.N.T Farm', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [249229, u'ANT Farm', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [296175, u'Britains Busiest Airport Heathrow', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [75166, u'The Biggest Loser US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [122281, u"Garrow's Law - Tales from the Old Bailey", 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [122281, u'Garrows Law', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [284076, u'Thats Incredible 2014', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [267709, u'Kesha My Crazy Beautiful Life', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [81346, u'Underbelly', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [81346, u'The Underbelly Files', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [81346, u'Underbelly Files', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [81346, u'Underbelly A Tale of Two Cities', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [81346, u'Underbelly A Tale Of Two Cities UNCUT', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [81346, u'Underbelly Razor', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [81346, u'Underbelly The Golden Mile', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [81346, u'Underbelly Badness', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [81346, u'Underbelly Squizzy', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [97731, u'Tosh.0', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [97731, u'Tosh 0', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [251334, u'Lawless UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [269783, u'Reckless US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [73178, u'Two Guys a Girl and a Pizza Place', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [280027, u'Off the Bat from the MLB Fan Cave', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [79330, u'Jericho', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [265467, u'Polar Bear Family and Me', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [83430, u'National Geographic Banged Up Abroad', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [81386, u'Being Human', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [81386, u'Being Human (UK)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [189931, u'RBT (AU)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [132591, u'7 Days (2009)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [132591, u'7 Days NZ', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [81491, u'Big Brother After Dark', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [81491, u'Big Brother US After Dark', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [81491, u'Big Brother After Dark US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [259669, u'DaVincis Demons', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [259669, u'Vincis Demons', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [259669, u"Vinci's Demons", 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [138761, u'Arn The Knight Templar', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [77398, u'X-Files', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [83462, u'Castle (2009)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [83462, u'Castle', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [83462, u'Castle 2009', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [128521, u'Million Dollar Listing', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [257550, u'Bellator FC', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [249361, u'Boss (2011)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [249361, u'Boss', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [251418, u'Frozen Planet', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [251418, u'David Attenborough Frozen Planet', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [251418, u'BBC Frozen Planet', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [73244, u'The Office (US)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [73244, u'The Office', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [79389, u'Nightmares and Dreamscapes', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [73246, u'30 Minute Meals', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [73246, u'30 Minute Meals with Rachel Ray', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [122401, u'Discovery Channel Cool Stuff and How it works', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [122401, u'Cool Stuff and How it works', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [73255, u'House', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:08 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [73255, u'House M D', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [253485, u'The Syndicate UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [266449, u'The Last Leg With Adam Hills', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [261690, u'The Americans', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [192061, u'Young Justice', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [192061, u'Young Justice Invasion', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [271936, u'Played CA', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [155201, u'Louie (2010)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [155201, u'Louie', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [273986, u'Breathless UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [292421, u'James Corden', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [251464, u'Worlds Most Dangerous Roads', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [73290, u'60 Minutes (US)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [204371, u'AuctionHunters', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [247381, u'Superscrimpers', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [271958, u'Arsenio Hall', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [265145, u'David Attenboroughs Africa', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [71256, u'The Daily Show', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [71256, u'The Daily Show with Jon Stewart', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [71256, u'The Daily Show with Trevor Noah', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [212571, u'Come Fly With Me (2010)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [271632, u'Lucas Bros Moving Company', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [296550, u'Glitch', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [253543, u'All American Muslim', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [253543, u'All-American Muslim', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [257645, u'Ultimate Spider-man', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [257645, u'Ultimate Spiderman', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [257645, u'Ultimate Spider man', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [257645, u'Ultimate Spider-Man Web Warriors', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [257645, u'Ultimate Spider-Man vs the Sinister 6', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [120431, u'Food Factory', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [271984, u'Wonderland AU', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [75382, u'The Ultimate Fighter Live', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [75382, u'The Ultimate Fighter Fridays', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [75382, u'The Ultimate Fighter', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [75393, u'The X Factor (AU)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [75393, u'The X Factor Australia', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [267907, u'The Fosters', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [77444, u'This Old House Program', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [281537, u'Aquarius US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [148581, u'Strike Back Legacy', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [149101, u'A League of Their Own (2010)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [149101, u'A League of Their Own UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [165521, u'Girls Gone Wild The Search for the Hottest Girl in America', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [81559, u'The Biggest Loser Australia', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [81559, u'The Biggest Loser AU', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [122521, u'The Fresh Beat Band', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [122521, u'Fresh Beat Band', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [81563, u'Border Security AU Front Line', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [81563, u'Border Security Australias Front Line', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [81563, u'Border Security Australias Frontline', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [286373, u'The Nightly Show', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [73387, u'The Late Late Show with Craig Ferguson', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [73387, u'Craig Ferguson', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [81580, u'Come Dine With Me UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [319153, u'Crashing US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [274099, u'At Midnight', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [274099, u'At Midnight With Chris Hardwick', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [276148, u'Review With Forrest MacNeil', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [79565, u'The Real Hustle', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [79565, u'The Real Hustle UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [274129, u'Klondike 2014', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [194261, u'PhoneShop', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [194261, u'Phone Shop', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [77526, u'Star Trek: TOS', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [100061, u'Undercover Boss', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [100061, u'Undercover Boss UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72073, u'Star Trek DS9', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [79590, u'Dancing With The Stars (US)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [253682, u'Project Runway Allstars', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [253682, u'Project Runway All-Stars', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [196351, u'T.U.F.F. Puppy', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [196351, u'TUFF Puppy', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [83714, u'Genius', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [83714, u'Genius With Dave Gormand', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [81670, u'The Murdoch Mysteries', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [81670, u'Murdoch Mysteries', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [81670, u'The Murdoch Mysteries (2008)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [272135, u'TURN Washingtons Spies', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72663, u'Accused', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [72663, u'Accused UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [257804, u'Too Cute!', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [280339, u'Food Fighters US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [288914, u'Penn Zero', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [71462, u'Sharpes', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [280361, u'Prey UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [284458, u'The Chair', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [315179, u'Aftermath', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [110381, u'Archer', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [71470, u'Star Trek: The Next Generation', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [71470, u'Star Trek TNG', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [75567, u'The Xtra Factor', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [75567, u'The Xtra Factor UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [79668, u'Anthony Bourdain: No Reservations', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [79668, u'No Reservations', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [311945, u'Bull', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [336522, u'The End of the Fucking World', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [83774, u'Antiques Roadshow (UK)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [83774, u'Antiques Roadshow UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [71489, u'Law and Order CI', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [71489, u'Law & Order: CI', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [292678, u'Finding Jesus-Faith Fact Forgery', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [221001, u'10 O Clock Live', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [202571, u'The Trip to Italy', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [210771, u'Cake Boss Next Great Baker', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [276312, u'From Dusk Til Dawn', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [276312, u'From Dusk Till Dawn', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [227161, u'Oprah Presents Master Class', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [227161, u"Oprah's Master Class", 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [73562, u'Beast Wars Transformers', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [264030, u'Avengers Assemble', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [264030, u'Marvels Avengers Assemble', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [264030, u'Marvels Avengers-Ultron Revolution', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [264030, u'Marvels Avengers-Secret Wars', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [259946, u'Location Location Location AU', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [259047, u'VGHS', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [249708, u'The Car Show', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [249708, u'The Car Show 2011', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [261999, u'Border Security Canadas Front Line', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [261999, u'Border Security Canada', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [73587, u'The Twilight Zone 1959', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [73587, u'The Twilight Zone 1960', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [73587, u'The Twilight Zone 1961', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [73587, u'The Twilight Zone 1962', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [73587, u'The Twilight Zone 1963', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [73587, u'The Twilight Zone 1964', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [280446, u'The Tom and Jerry Show', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [73599, u'Dark Shadows (1966)', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [73599, u'Dark Shadows The Beginning', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [89991, u'Out of the Wild: The Alaskan Experiment', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [89991, u'Out of the Wild: Venezuela', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [276360, u'19-2 CA', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [223161, u'CBC Marketplace', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [264085, u'The Bridge US', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [79771, u'Air Crash Investigation', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [79771, u'Air Crash Investigation Mayday', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [79771, u'National Geographic Air Crash Investigation', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [251807, u'Green Lantern: The Animated Series', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [251807, u'Green Lantern TAS', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [251807, u'Green Lantern The Animated Series', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [77733, u'Degrassi: The Next Generation', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [77733, u'Degrassi TNG', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [77733, u'Degrassi', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [73641, u'King of Queens', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [75692, u'Law & Order: SVU', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [292782, u'Nurse UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [270261, u'Jimmy Fallon', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [270262, u'Seth Meyers', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [79177, u'Life On Mars UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [83897, u'Life After People: The Series', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [92091, u'MasterChef Australia', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [92091, u'MasterChef AU', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [294846, u'8MMM', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [263506, u'Jamies 16 Minute Meals', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [264141, u'Falcon', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [79824, u'Naruto Shippuden', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [77780, u'G.I. Joe', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [77780, u'GI Joe', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [77780, u'G I Joe', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [79836, u"Dragon's Den (UK)", 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [79836, u'Dragons Den UK', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [178141, u'My Ghost Story', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [73696, u'CSI: New York', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [270307, u'Family SOS with Jo Frost', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [75748, u'The Culture Show Uncut', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [253931, u'Rob', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: INSERT INTO scene_exceptions (tvdb_id,show_name,provider) VALUES (?,?,?); with args [70994, u'MASH', 'sb_tvdb_scene_exceptions']
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: Transaction with 756 query's executed
2018-10-01 11:28:09 INFO     CHECKVERSION :: Clear name cache
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: cache.db: DELETE FROM scene_names WHERE tvdb_id = ? with args [0]
2018-10-01 11:28:09 INFO     CHECKVERSION :: Performing a vacuum on database: cache.db
2018-10-01 11:28:09 DEBUG    CHECKVERSION :: cache.db: VACUUM
2018-10-01 11:29:07 DEBUG    SEARCH :: Starting new thread: SEARCH
2018-10-01 11:29:07 INFO     SEARCHQUEUE-RSS-SEARCH :: Changing all old missing episodes (UNAIRED) to status WANTED
2018-10-01 11:29:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_episodes WHERE status = ? AND season > 0 AND airdate < ? with args [1, 736968]
2018-10-01 11:29:07 INFO     SEARCHQUEUE-RSS-SEARCH :: Beginning search for new episodes on RSS
2018-10-01 11:29:07 INFO     SEARCHQUEUE-RSS-SEARCH :: Searching all providers for any needed episodes
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT time FROM lastUpdate WHERE provider = ? with args ['womble_s_index']
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Womble's Index cache update URL: http://newshost.co.za/rss/?sec=tv-x264&fr=false
2018-10-01 11:29:08 ERROR    SEARCHQUEUE-RSS-SEARCH :: Error while searching Womble's Index, skipping: coercing to Unicode: need string or buffer, instance found
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Traceback (most recent call last):
  File "/app/sickbeard/sickbeard/search.py", line 161, in searchForNeededEpisodes
    curFoundResults = curProvider.searchRSS()
  File "/app/sickbeard/sickbeard/providers/generic.py", line 182, in searchRSS
    self.cache.updateCache()
  File "/app/sickbeard/sickbeard/tvcache.py", line 104, in updateCache
    data = self._getRSSData()
  File "/app/sickbeard/sickbeard/providers/womble.py", line 57, in _getRSSData
    data = self.provider.getURL(url)
  File "/app/sickbeard/sickbeard/providers/generic.py", line 114, in getURL
    response = helpers.getURL(req)
  File "/app/sickbeard/sickbeard/helpers.py", line 179, in getURL
    obj = getURLFileLike(url, validate, cookies, password_mgr, throw_exc)
  File "/app/sickbeard/sickbeard/helpers.py", line 227, in getURLFileLike
    logger.log(u"HTTP error " + str(e.code) + " while loading URL " + url, logger.WARNING)
TypeError: coercing to Unicode: need string or buffer, instance found

2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT time FROM lastUpdate WHERE provider = ? with args ['sick_beard_index']
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Sick Beard Index cache update URL: http://lolo.sickbeard.com/api?t=tvsearch&cat=5030%2C5040
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: UPDATE lastUpdate SET time = ? WHERE provider = ? with args [1538393348, 'sick_beard_index']
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO lastUpdate (time, provider) VALUES (?, ?) with args [1538393348, 'sick_beard_index']
2018-10-01 11:29:08 INFO     SEARCHQUEUE-RSS-SEARCH :: Clearing Sick Beard Index cache and updating with new information
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: DELETE FROM [sick_beard_index] WHERE 1
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Chesapeake.Shores.S03E09.Episode.9.720p.NF.WEB-DL.DDP5.1.x264-TOMMY
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Chesapeake Shores
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Chesapeake.Shores']
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Chesapeake Shores', u'Chesapeake Shores']
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Chesapeake Shores
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Chesapeake.Shores']
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Chesapeake.Shores.S03E09.Episode.9.720p.NF.WEB-DL.DDP5.1.x264-TOMMY', 3, '|9|', 0, 0, 'http://lolo.sickbeard.com/getnzb/48f4eadaa496f9940e026142df697f21.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393348, 32]
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Chesapeake.Shores.S03E09.Episode.9.1080p.NF.WEB-DL.DDP5.1.x264-TOMMY
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Chesapeake Shores
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Chesapeake.Shores']
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Chesapeake.Shores.S03E09.Episode.9.1080p.NF.WEB-DL.DDP5.1.x264-TOMMY', 3, '|9|', 0, 0, 'http://lolo.sickbeard.com/getnzb/9663cf356397a25b84f8f6b631e08e2e.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393348, 64]
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: James.Martins.Saturday.Morning.S02E03.720p.AMZN.WEB-DL.DDP2.0.H.264-monkee
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of James Martins Saturday Morning
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'James.Martins.Saturday.Morning']
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'James Martins Saturday Morning', u'James Martins Saturday Morning']
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for James Martins Saturday Morning
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'James.Martins.Saturday.Morning']
2018-10-01 11:29:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['James.Martins.Saturday.Morning.S02E03.720p.AMZN.WEB-DL.DDP2.0.H.264-monkee', 2, '|3|', 0, 0, 'http://lolo.sickbeard.com/getnzb/9246ac2bd668a2ad77a86417e6907696.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393348, 32]
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Only.Way.Is.Essex.S23E05.1080p.AMZN.WEB-DL.DDP2.0.H.264-NTb
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Only Way Is Essex
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Only.Way.Is.Essex']
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Only Way Is Essex', u'The Only Way Is Essex']
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Only Way Is Essex
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'The.Only.Way.Is.Essex']
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Only.Way.Is.Essex.S23E05.1080p.AMZN.WEB-DL.DDP2.0.H.264-NTb', 23, '|5|', 0, 0, 'http://lolo.sickbeard.com/getnzb/4343a6a5d649a7e4b326a59ee2eb98db.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393349, 64]
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: James.Martins.Saturday.Morning.S02E03.1080p.AMZN.WEB-DL.DDP2.0.H.264-monkee
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of James Martins Saturday Morning
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'James.Martins.Saturday.Morning']
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['James.Martins.Saturday.Morning.S02E03.1080p.AMZN.WEB-DL.DDP2.0.H.264-monkee', 2, '|3|', 0, 0, 'http://lolo.sickbeard.com/getnzb/f0c82b2b21a41297ccb194b233336727.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393349, 64]
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Last.Week.Tonight.with.John.Oliver.S05E24.720p.WEB-DL.AAC2.0.H.264-doosh
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Last Week Tonight with John Oliver
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Last.Week.Tonight.with.John.Oliver']
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Last Week Tonight with John Oliver', u'Last Week Tonight with John Oliver']
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Last Week Tonight with John Oliver
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Last.Week.Tonight.with.John.Oliver']
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Last.Week.Tonight.with.John.Oliver.S05E24.720p.WEB-DL.AAC2.0.H.264-doosh', 5, '|24|', 0, 0, 'http://lolo.sickbeard.com/getnzb/209a23a963364c681469727460177345.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393349, 32]
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Deuce.S02E04.What.Big.Ideas.1080p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Deuce
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Deuce']
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Deuce', u'The Deuce']
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Deuce
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'The.Deuce']
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Deuce.S02E04.What.Big.Ideas.1080p.AMZN.WEB-DL.DDP5.1.H.264-NTb', 2, '|4|', 0, 0, 'http://lolo.sickbeard.com/getnzb/b59075fe1ed601194ea43c794f9c250b.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393349, 64]
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Crazy.Ex-Girlfriend.S02E05.Why.Is.Joshs.Ex-Girlfriend.Eating.Carbs.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Crazy Ex-Girlfriend
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Crazy.Ex-Girlfriend']
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Crazy Ex Girlfriend', u'Crazy Ex Girlfriend']
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Crazy Ex Girlfriend
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Crazy.Ex-Girlfriend']
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Crazy.Ex-Girlfriend.S02E05.Why.Is.Joshs.Ex-Girlfriend.Eating.Carbs.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio', 2, '|5|', 0, 0, 'http://lolo.sickbeard.com/getnzb/76ff619a9b8784188709187e07d1069a.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393349, 64]
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Crazy.Ex-Girlfriend.S01E01.Josh.Just.Happens.to.Live.Here.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Crazy Ex-Girlfriend
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Crazy.Ex-Girlfriend']
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Crazy.Ex-Girlfriend.S01E01.Josh.Just.Happens.to.Live.Here.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio', 1, '|1|', 0, 0, 'http://lolo.sickbeard.com/getnzb/68f59641b0f5996b4102665b35a142c6.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393349, 64]
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Crazy.Ex-Girlfriend.S02E13.Can.Josh.Take.a.Leap.of.Faith.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Crazy Ex-Girlfriend
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Crazy.Ex-Girlfriend']
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Crazy.Ex-Girlfriend.S02E13.Can.Josh.Take.a.Leap.of.Faith.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio', 2, '|13|', 0, 0, 'http://lolo.sickbeard.com/getnzb/25ed9ddc41ca8f4496a225bab3264159.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393349, 64]
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Crazy.Ex-Girlfriend.S02E12.Is.Josh.Free.in.Two.Weeks.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Crazy Ex-Girlfriend
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Crazy.Ex-Girlfriend']
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Crazy.Ex-Girlfriend.S02E12.Is.Josh.Free.in.Two.Weeks.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio', 2, '|12|', 0, 0, 'http://lolo.sickbeard.com/getnzb/2fe1e8c883b807606d6f400157d2eb0f.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393349, 64]
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Crazy.Ex-Girlfriend.S02E11.Josh.Is.the.Man.of.My.Dreams.Right.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Crazy Ex-Girlfriend
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Crazy.Ex-Girlfriend']
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Crazy.Ex-Girlfriend.S02E11.Josh.Is.the.Man.of.My.Dreams.Right.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio', 2, '|11|', 0, 0, 'http://lolo.sickbeard.com/getnzb/657bc8e9349d8529bd7e4288524e43f5.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393349, 64]
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Crazy.Ex-Girlfriend.S02E10.Will.Scarsdale.Like.Joshs.Shayna.Punim.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Crazy Ex-Girlfriend
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Crazy.Ex-Girlfriend']
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Crazy.Ex-Girlfriend.S02E10.Will.Scarsdale.Like.Joshs.Shayna.Punim.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio', 2, '|10|', 0, 0, 'http://lolo.sickbeard.com/getnzb/618a35ecc958912ce6cea36a39b39645.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393349, 64]
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Crazy.Ex-Girlfriend.S02E09.When.Do.I.Get.to.Spend.Time.with.Josh.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Crazy Ex-Girlfriend
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Crazy.Ex-Girlfriend']
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Crazy.Ex-Girlfriend.S02E09.When.Do.I.Get.to.Spend.Time.with.Josh.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio', 2, '|9|', 0, 0, 'http://lolo.sickbeard.com/getnzb/f86b33df5f05d6f3d2496822b9e82d9a.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393349, 64]
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Crazy.Ex-Girlfriend.S02E08.Who.Is.Joshs.Soup.Fairy.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Crazy Ex-Girlfriend
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Crazy.Ex-Girlfriend']
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Crazy.Ex-Girlfriend.S02E08.Who.Is.Joshs.Soup.Fairy.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio', 2, '|8|', 0, 0, 'http://lolo.sickbeard.com/getnzb/f7a04c64bd01c4e478f6e16759f9dfbf.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393349, 64]
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Crazy.Ex-Girlfriend.S02E07.Whos.the.Cool.Girl.Josh.Is.Dating.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Crazy Ex-Girlfriend
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Crazy.Ex-Girlfriend']
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Crazy.Ex-Girlfriend.S02E07.Whos.the.Cool.Girl.Josh.Is.Dating.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio', 2, '|7|', 0, 0, 'http://lolo.sickbeard.com/getnzb/3cd49872a91a2b47064571bed149e051.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393349, 64]
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Crazy.Ex-Girlfriend.S02E06.Who.Needs.Josh.When.You.Have.a.Girl.Group.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Crazy Ex-Girlfriend
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Crazy.Ex-Girlfriend']
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Crazy.Ex-Girlfriend.S02E06.Who.Needs.Josh.When.You.Have.a.Girl.Group.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio', 2, '|6|', 0, 0, 'http://lolo.sickbeard.com/getnzb/7e9444b7cd187f35151801275c2a4d12.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393349, 64]
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Crazy.Ex-Girlfriend.S02E04.When.Will.Josh.and.His.Friend.Leave.Me.Alone.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Crazy Ex-Girlfriend
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Crazy.Ex-Girlfriend']
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Crazy.Ex-Girlfriend.S02E04.When.Will.Josh.and.His.Friend.Leave.Me.Alone.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio', 2, '|4|', 0, 0, 'http://lolo.sickbeard.com/getnzb/3da4fcd8132562b68b51bae3bdcb93b7.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393349, 64]
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Crazy.Ex-Girlfriend.S02E03.All.Signs.Point.to.Josh.or.Is.It.Joshs.Friend.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Crazy Ex-Girlfriend
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Crazy.Ex-Girlfriend']
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Crazy.Ex-Girlfriend.S02E03.All.Signs.Point.to.Josh.or.Is.It.Joshs.Friend.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio', 2, '|3|', 0, 0, 'http://lolo.sickbeard.com/getnzb/bbb54b70521f26ee5d1c77b0dcecf8c2.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393349, 64]
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Crazy.Ex-Girlfriend.S02E02.When.Will.Josh.See.How.Cool.I.Am.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Crazy Ex-Girlfriend
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Crazy.Ex-Girlfriend']
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Crazy.Ex-Girlfriend.S02E02.When.Will.Josh.See.How.Cool.I.Am.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio', 2, '|2|', 0, 0, 'http://lolo.sickbeard.com/getnzb/e116a7019b80752a60b5a92ac26339d1.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393349, 64]
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Crazy.Ex-Girlfriend.S02E01.Where.Is.Joshs.Friend.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Crazy Ex-Girlfriend
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Crazy.Ex-Girlfriend']
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Crazy.Ex-Girlfriend.S02E01.Where.Is.Joshs.Friend.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio', 2, '|1|', 0, 0, 'http://lolo.sickbeard.com/getnzb/4158544fc19e0822d216c75073dcc1c9.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393350, 64]
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Deuce.S02E04.What.Big.Ideas.720p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Deuce
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Deuce']
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Deuce.S02E04.What.Big.Ideas.720p.AMZN.WEB-DL.DDP5.1.H.264-NTb', 2, '|4|', 0, 0, 'http://lolo.sickbeard.com/getnzb/8644d9748eae7ffc07003a6937c27143.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393350, 32]
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Jim.Jefferies.Show.S02E22.Republicans.Stand.By.Brett.Kavanaugh.720p.AMZN.WEB-DL.DDP2.0.H.264-NTb
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Jim Jefferies Show
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Jim.Jefferies.Show']
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Jim Jefferies Show', u'The Jim Jefferies Show']
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Jim Jefferies Show
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'The.Jim.Jefferies.Show']
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Jim.Jefferies.Show.S02E22.Republicans.Stand.By.Brett.Kavanaugh.720p.AMZN.WEB-DL.DDP2.0.H.264-NTb', 2, '|22|', 0, 0, 'http://lolo.sickbeard.com/getnzb/552f29463527e835cdfbe822de14b360.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393350, 32]
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Jim.Jefferies.Show.S02E22.Republicans.Stand.By.Brett.Kavanaugh.1080p.AMZN.WEB-DL.DDP2.0.H.264-NTb
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Jim Jefferies Show
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Jim.Jefferies.Show']
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Jim.Jefferies.Show.S02E22.Republicans.Stand.By.Brett.Kavanaugh.1080p.AMZN.WEB-DL.DDP2.0.H.264-NTb', 2, '|22|', 0, 0, 'http://lolo.sickbeard.com/getnzb/19150899d786fca9af35fff4cd9a5ce0.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393350, 64]
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Imitation.Game.S01E05.1080p.AMZN.WEB-DL.DDP2.0.H.264-NTb
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Imitation Game
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Imitation.Game']
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Imitation Game', u'The Imitation Game']
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Imitation Game
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'The.Imitation.Game']
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Imitation.Game.S01E05.1080p.AMZN.WEB-DL.DDP2.0.H.264-NTb', 1, '|5|', 0, 0, 'http://lolo.sickbeard.com/getnzb/52e4117175033e8fb86cb89905d83b23.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393350, 64]
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: South.Park.S22E01.Dead.Kids.720p.AMZN.WEBRip.DDP2.0.x264-NTb
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of South Park
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'South.Park']
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'South Park', u'South Park']
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for South Park
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'South.Park']
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['South.Park.S22E01.Dead.Kids.720p.AMZN.WEBRip.DDP2.0.x264-NTb', 22, '|1|', 0, 0, 'http://lolo.sickbeard.com/getnzb/e55a2056cbea35f4af49665371c64188.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393350, 32]
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: South.Park.S22E01.Dead.Kids.1080p.AMZN.WEB-DL.DDP2.0.H.264-NTb
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of South Park
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'South.Park']
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['South.Park.S22E01.Dead.Kids.1080p.AMZN.WEB-DL.DDP2.0.H.264-NTb', 22, '|1|', 0, 0, 'http://lolo.sickbeard.com/getnzb/b1bcfd5eca58c951d008d4c242749629.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393350, 64]
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Shameless.US.S09E04.Do.Right.Vote.White.1080p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Shameless US
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Shameless.US']
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Shameless US', u'Shameless US']
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Shameless US
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Shameless.US']
2018-10-01 11:29:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Shameless.US.S09E04.Do.Right.Vote.White.1080p.AMZN.WEB-DL.DDP5.1.H.264-NTb', 9, '|4|', 0, 0, 'http://lolo.sickbeard.com/getnzb/63d4b0fd17cdb29d74ec7cd9aa91dc3d.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393350, 64]
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Crash.S01E01.Crash.1080p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Crash
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Crash']
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Crash', u'Crash']
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Crash
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Crash']
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Crash.S01E01.Crash.1080p.AMZN.WEB-DL.DDP5.1.H.264-NTb', 1, '|1|', 0, 0, 'http://lolo.sickbeard.com/getnzb/d1816b90db1db3e670cb3139f2d8ba99.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393351, 64]
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Blue.Bloods.S09E01.Playing.With.Fire.720p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Blue Bloods
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Blue.Bloods']
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Blue Bloods', u'Blue Bloods']
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Blue Bloods
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Blue.Bloods']
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Blue.Bloods.S09E01.Playing.With.Fire.720p.AMZN.WEB-DL.DDP5.1.H.264-NTb', 9, '|1|', 0, 0, 'http://lolo.sickbeard.com/getnzb/851ba984a59fd76174b046cdc3f34548.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393351, 32]
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Blue.Bloods.S09E01.Playing.With.Fire.1080p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Blue Bloods
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Blue.Bloods']
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Blue.Bloods.S09E01.Playing.With.Fire.1080p.AMZN.WEB-DL.DDP5.1.H.264-NTb', 9, '|1|', 0, 0, 'http://lolo.sickbeard.com/getnzb/57d4307cfa1c79d35b58dba5021d6909.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393351, 64]
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Back.to.Mine.Stay.For.Longer.S01E01.1080p.AMZN.WEB-DL.DDP2.0.H.264-NTb
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Back to Mine Stay For Longer
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Back.to.Mine.Stay.For.Longer']
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Back to Mine Stay For Longer', u'Back to Mine Stay For Longer']
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Back to Mine Stay For Longer
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Back.to.Mine.Stay.For.Longer']
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Back.to.Mine.Stay.For.Longer.S01E01.1080p.AMZN.WEB-DL.DDP2.0.H.264-NTb', 1, '|1|', 0, 0, 'http://lolo.sickbeard.com/getnzb/37c1e74690fc9cd5ab53ad0c9f2d7579.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393351, 64]
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Back.To.Mine.S01E01.1080p.AMZN.WEB-DL.DDP2.0.H.264-NTb
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Back To Mine
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Back.To.Mine']
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Back To Mine', u'Back To Mine']
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Back To Mine
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Back.To.Mine']
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Back.To.Mine.S01E01.1080p.AMZN.WEB-DL.DDP2.0.H.264-NTb', 1, '|1|', 0, 0, 'http://lolo.sickbeard.com/getnzb/e4ff8fdaebb83bfa3556bf5dfd5f273b.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393351, 64]
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Absolutely.Ascot.S01E02.1080p.AMZN.WEB-DL.DDP2.0.H.264-NTb
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Absolutely Ascot
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Absolutely.Ascot']
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Absolutely Ascot', u'Absolutely Ascot']
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Absolutely Ascot
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Absolutely.Ascot']
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Absolutely.Ascot.S01E02.1080p.AMZN.WEB-DL.DDP2.0.H.264-NTb', 1, '|2|', 0, 0, 'http://lolo.sickbeard.com/getnzb/5c764c1d7ad57271482946103f221643.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393351, 64]
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: I.Love.You.America.With.Sarah.Silverman.S01E14.18.Bill.Burr.720p.HULU.WEB-DL.AAC2.0.H.264-monkee
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of I Love You America With Sarah Silverman
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'I.Love.You.America.With.Sarah.Silverman']
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'I Love You America With Sarah Silverman', u'I Love You America With Sarah Silverman']
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for I Love You America With Sarah Silverman
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'I.Love.You.America.With.Sarah.Silverman']
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['I.Love.You.America.With.Sarah.Silverman.S01E14.18.Bill.Burr.720p.HULU.WEB-DL.AAC2.0.H.264-monkee', 1, '|14|', 0, 0, 'http://lolo.sickbeard.com/getnzb/ef698d3f91ab9c6c072e788c311b89b1.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393351, 32]
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: I.Love.You.America.With.Sarah.Silverman.S01E14.Bill.Burr.1080p.HULU.WEB-DL.AAC2.0.H.264-monkee
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of I Love You America With Sarah Silverman
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'I.Love.You.America.With.Sarah.Silverman']
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['I.Love.You.America.With.Sarah.Silverman.S01E14.Bill.Burr.1080p.HULU.WEB-DL.AAC2.0.H.264-monkee', 1, '|14|', 0, 0, 'http://lolo.sickbeard.com/getnzb/0f3816026c1e92b0c5a6d7e1dae82f2a.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393351, 64]
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Saturday.Night.Live.S44E01.Adam.Driver.Kanye.West.1080p.HULU.WEB-DL.AAC2.0.H.264-monkee
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Saturday Night Live
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Saturday.Night.Live']
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Saturday Night Live', u'Saturday Night Live']
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Saturday Night Live
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Saturday.Night.Live']
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Saturday.Night.Live.S44E01.Adam.Driver.Kanye.West.1080p.HULU.WEB-DL.AAC2.0.H.264-monkee', 44, '|1|', 0, 0, 'http://lolo.sickbeard.com/getnzb/a69552107c882cabfe6b0bf8a38ad542.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393351, 64]
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Saturday.Night.Live.S44E01.Adam.Driver.Kanye.West.720p.WEB-DL.AAC2.0.H.264-doosh
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Saturday Night Live
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Saturday.Night.Live']
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Saturday.Night.Live.S44E01.Adam.Driver.Kanye.West.720p.WEB-DL.AAC2.0.H.264-doosh', 44, '|1|', 0, 0, 'http://lolo.sickbeard.com/getnzb/9dabffbad55b85d80056c2a0b56c9fca.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393351, 32]
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: A.Discovery.Of.Witches.S01E03.720p.HDTV.x264-MTB
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of A Discovery Of Witches
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'A.Discovery.Of.Witches']
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'A Discovery Of Witches', u'A Discovery Of Witches']
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for A Discovery Of Witches
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'A.Discovery.Of.Witches']
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['A.Discovery.Of.Witches.S01E03.720p.HDTV.x264-MTB', 1, '|3|', 0, 0, 'http://lolo.sickbeard.com/getnzb/413ae3f5af42378040db804b2e6273c3.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393351, 4]
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Real.Time.with.Bill.Maher.S16E29.Overtime.1080p.AMZN.WEB-DL.DDP2.0.H.264-monkee
2018-10-01 11:29:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Real Time with Bill Maher
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Real.Time.with.Bill.Maher']
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Real Time with Bill Maher', u'Real Time with Bill Maher']
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Real Time with Bill Maher
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Real.Time.with.Bill.Maher']
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Real.Time.with.Bill.Maher.S16E29.Overtime.1080p.AMZN.WEB-DL.DDP2.0.H.264-monkee', 16, '|29|', 0, 0, 'http://lolo.sickbeard.com/getnzb/17b0bb75098166e550b21f8f9c79dbf0.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393352, 64]
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Real.Time.with.Bill.Maher.S16E29.1080p.AMZN.WEB-DL.DDP2.0.H.264-monkee
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Real Time with Bill Maher
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Real.Time.with.Bill.Maher']
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Real.Time.with.Bill.Maher.S16E29.1080p.AMZN.WEB-DL.DDP2.0.H.264-monkee', 16, '|29|', 0, 0, 'http://lolo.sickbeard.com/getnzb/810b1875edb89e9fc31b5c43141eae27.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393352, 64]
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Greys.Anatomy.S15E01.HDTV.x264-KILLERS
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Greys Anatomy
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Greys.Anatomy']
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Greys Anatomy', u'Greys Anatomy']
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Greys Anatomy
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Greys.Anatomy']
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Greys.Anatomy.S15E01.HDTV.x264-KILLERS', 15, '|1|', 0, 0, 'http://lolo.sickbeard.com/getnzb/fd33c53e16fd846103330fde4ba86fc9.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393352, 1]
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Real.Time.with.Bill.Maher.S16E29.1080p.AMZN.WEB-DL.AAC2.0.H.264-monkee
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Real Time with Bill Maher
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Real.Time.with.Bill.Maher']
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Real.Time.with.Bill.Maher.S16E29.1080p.AMZN.WEB-DL.AAC2.0.H.264-monkee', 16, '|29|', 0, 0, 'http://lolo.sickbeard.com/getnzb/45ca52135049258a8625f78940177b0b.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393352, 64]
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: CC.Stand-Up.S02E02.Megan.Gailey.1080p.CC.WEB-DL.AAC2.0.x264-monkee
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of CC Stand-Up
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'CC.Stand-Up']
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'CC Stand Up', u'CC Stand Up']
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for CC Stand Up
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'CC.Stand-Up']
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['CC.Stand-Up.S02E02.Megan.Gailey.1080p.CC.WEB-DL.AAC2.0.x264-monkee', 2, '|2|', 0, 0, 'http://lolo.sickbeard.com/getnzb/d17fd72d9ff1e1d67d8e5598a0edb656.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393352, 64]
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: CC.Stand-Up.S02E01.Langston.Kerman.1080p.CC.WEB-DL.AAC2.0.x264-monkee
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of CC Stand-Up
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'CC.Stand-Up']
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['CC.Stand-Up.S02E01.Langston.Kerman.1080p.CC.WEB-DL.AAC2.0.x264-monkee', 2, '|1|', 0, 0, 'http://lolo.sickbeard.com/getnzb/854ff2902f64eb620267e795e9b85f04.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393352, 64]
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Real.Time.With.Bill.Maher.S16E29.Overtime.720p.WEB-DL.AAC2.0.H.264-Monkeeless
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Real Time With Bill Maher
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Real.Time.With.Bill.Maher']
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Real Time With Bill Maher', u'Real Time With Bill Maher']
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Real Time With Bill Maher
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Real.Time.With.Bill.Maher']
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Real.Time.With.Bill.Maher.S16E29.Overtime.720p.WEB-DL.AAC2.0.H.264-Monkeeless', 16, '|29|', 0, 0, 'http://lolo.sickbeard.com/getnzb/73122cddd9e3772a7f3dde0272a44469.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393352, 32]
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Real.Time.With.Bill.Maher.S16E29.720p.WEB-DL.AAC2.0.H.264-doosh
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Real Time With Bill Maher
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Real.Time.With.Bill.Maher']
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Real.Time.With.Bill.Maher.S16E29.720p.WEB-DL.AAC2.0.H.264-doosh', 16, '|29|', 0, 0, 'http://lolo.sickbeard.com/getnzb/aebe9e8002234bbc24f8e6910a9a5747.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393352, 32]
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: South.Park.S22E01.Dead.Kids.1080p.AMZN.WEB-DL
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of South Park
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'South.Park']
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['South.Park.S22E01.Dead.Kids.1080p.AMZN.WEB-DL', 22, '|1|', 0, 0, 'http://lolo.sickbeard.com/getnzb/7e1d30a2d9589a067d5ea271356632f9.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393352, 64]
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: strangers.s01e03.1080p.hdtv.x264.mtb.UKSubs
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of strangers
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'strangers']
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'strangers', u'strangers']
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for strangers
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'strangers']
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['strangers.s01e03.1080p.hdtv.x264.mtb.UKSubs', 1, '|3|', 0, 0, 'http://lolo.sickbeard.com/getnzb/e09d7fff2849ddc8d410034c6dc280b9.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393352, 16]
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: press.s01e04.1080p.hdtv.x264.mtb.UKSubs
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of press
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'press']
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'press', u'press']
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for press
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'press']
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['press.s01e04.1080p.hdtv.x264.mtb.UKSubs', 1, '|4|', 0, 0, 'http://lolo.sickbeard.com/getnzb/c022bada61baa4f450630e20a7d706c1.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393353, 16]
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: VICE.News.Tonight.2018.09.27.1080p.AMZN.WEB-DL.DDP2.0.H.264-monkee
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of VICE News Tonight
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'VICE.News.Tonight']
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'VICE News Tonight', u'VICE News Tonight']
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for VICE News Tonight
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'VICE.News.Tonight']
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['VICE.News.Tonight.2018.09.27.1080p.AMZN.WEB-DL.DDP2.0.H.264-monkee', 1, '||', 0, 0, 'http://lolo.sickbeard.com/getnzb/8e052a0ac2b0290fce14cfb4afbd79c3.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393353, 64]
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Its.Always.Sunny.in.Philadelphia.S13E04.Times.Up.for.the.Gang.1080p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Its Always Sunny in Philadelphia
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Its.Always.Sunny.in.Philadelphia']
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Its Always Sunny in Philadelphia', u'Its Always Sunny in Philadelphia']
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Its Always Sunny in Philadelphia
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Its.Always.Sunny.in.Philadelphia']
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Its.Always.Sunny.in.Philadelphia.S13E04.Times.Up.for.the.Gang.1080p.AMZN.WEB-DL.DDP5.1.H.264-NTb', 13, '|4|', 0, 0, 'http://lolo.sickbeard.com/getnzb/a6a9d88a260ee97ab2a254a5f652dbc6.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393353, 64]
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Its.Always.Sunny.in.Philadelphia.S13E04.Times.Up.for.the.Gang.720p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Its Always Sunny in Philadelphia
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Its.Always.Sunny.in.Philadelphia']
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Its.Always.Sunny.in.Philadelphia.S13E04.Times.Up.for.the.Gang.720p.AMZN.WEB-DL.DDP5.1.H.264-NTb', 13, '|4|', 0, 0, 'http://lolo.sickbeard.com/getnzb/c3add3b59a0ce47e202d36ad0fe9086c.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393353, 32]
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Modern.Family.S10E01.I.Love.a.Parade.REPACK.1080p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Modern Family
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Modern.Family']
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Modern Family', u'Modern Family']
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Modern Family
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Modern.Family']
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Modern.Family.S10E01.I.Love.a.Parade.REPACK.1080p.AMZN.WEB-DL.DDP5.1.H.264-NTb', 10, '|1|', 0, 0, 'http://lolo.sickbeard.com/getnzb/3ad96781fb485fc14f4a12436891eb45.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393353, 64]
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Modern.Family.S10E01.I.Love.a.Parade.REPACK.720p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Modern Family
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Modern.Family']
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Modern.Family.S10E01.I.Love.a.Parade.REPACK.720p.AMZN.WEB-DL.DDP5.1.H.264-NTb', 10, '|1|', 0, 0, 'http://lolo.sickbeard.com/getnzb/0ffd27d1e4935991f817b3b7e5ad932f.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393353, 32]
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Daily.Show.with.Trevor.Noah.2018.09.27.America.Ferrera.Extended.1080p.CC.WEB-DL.AAC2.0.x264-monkee
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Daily Show with Trevor Noah
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Daily.Show.with.Trevor.Noah']
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Daily Show with Trevor Noah', u'The Daily Show with Trevor Noah']
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Daily Show with Trevor Noah
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'The.Daily.Show.with.Trevor.Noah']
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Daily.Show.with.Trevor.Noah.2018.09.27.America.Ferrera.Extended.1080p.CC.WEB-DL.AAC2.0.x264-monkee', 1, '||', 0, 0, 'http://lolo.sickbeard.com/getnzb/00fe903c23317c9e0bd192ce7d283c4a.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393353, 64]
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Full.Frontal.with.Samantha.Bee.S03E23.REPACK.1080p.TBS.WEB-DL.AAC2.0.x264-monkee
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Full Frontal with Samantha Bee
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Full.Frontal.with.Samantha.Bee']
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Full Frontal with Samantha Bee', u'Full Frontal with Samantha Bee']
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Full Frontal with Samantha Bee
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Full.Frontal.with.Samantha.Bee']
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Full.Frontal.with.Samantha.Bee.S03E23.REPACK.1080p.TBS.WEB-DL.AAC2.0.x264-monkee', 3, '|23|', 0, 0, 'http://lolo.sickbeard.com/getnzb/3b344fe51d91601ffb68d0c3577c853e.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393353, 64]
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Shameless.US.S09E03.You.Havent.Done.This.Before.Have.You.720p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Shameless US
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Shameless.US']
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Shameless.US.S09E03.You.Havent.Done.This.Before.Have.You.720p.AMZN.WEB-DL.DDP5.1.H.264-NTb', 9, '|3|', 0, 0, 'http://lolo.sickbeard.com/getnzb/34e0ae9b21978f511369b28a17d87289.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393353, 32]
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Mayans.M.C.S01E04.MurcielagoZotz.1080p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Mayans M C
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Mayans.M.C']
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Mayans M C', u'Mayans M C']
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Mayans M C
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Mayans.M.C']
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Mayans.M.C.S01E04.MurcielagoZotz.1080p.AMZN.WEB-DL.DDP5.1.H.264-NTb', 1, '|4|', 0, 0, 'http://lolo.sickbeard.com/getnzb/0d63984344f424e2bd8ff9a52e67b96d.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393353, 64]
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Mayans.M.C.S01E04.MurcielagoZotz.720p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Mayans M C
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Mayans.M.C']
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Mayans.M.C.S01E04.MurcielagoZotz.720p.AMZN.WEB-DL.DDP5.1.H.264-NTb', 1, '|4|', 0, 0, 'http://lolo.sickbeard.com/getnzb/889013ac1ff2416fa1877aca7f24f139.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393353, 32]
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: VICE.News.Tonight.2018.09.27.720p.WEB-DL.AAC2.0.H.264-doosh
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of VICE News Tonight
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'VICE.News.Tonight']
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['VICE.News.Tonight.2018.09.27.720p.WEB-DL.AAC2.0.H.264-doosh', 1, '||', 0, 0, 'http://lolo.sickbeard.com/getnzb/2b68e5b4962443ed37176790e5d82d71.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393353, 32]
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Full.Frontal.with.Samantha.Bee.S03E23.1080p.TBS.WEB-DL.AAC2.0.x264-monkee
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Full Frontal with Samantha Bee
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Full.Frontal.with.Samantha.Bee']
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Full.Frontal.with.Samantha.Bee.S03E23.1080p.TBS.WEB-DL.AAC2.0.x264-monkee', 3, '|23|', 0, 0, 'http://lolo.sickbeard.com/getnzb/5a3fc8ebdeb425cbae50d468fe61e944.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393353, 64]
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: VICE.News.Tonight.2018.09.26.1080p.AMZN.WEB-DL.DDP2.0.H.264-monkee
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of VICE News Tonight
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'VICE.News.Tonight']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['VICE.News.Tonight.2018.09.26.1080p.AMZN.WEB-DL.DDP2.0.H.264-monkee', 1, '||', 0, 0, 'http://lolo.sickbeard.com/getnzb/405f7c5f5312d2015b62d16d8a081699.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393354, 64]
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Daily.Show.with.Trevor.Noah.2018.09.26.Bill.Gates.Extended.1080p.CC.WEB-DL.AAC2.0.x264-monkee
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Daily Show with Trevor Noah
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Daily.Show.with.Trevor.Noah']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Daily.Show.with.Trevor.Noah.2018.09.26.Bill.Gates.Extended.1080p.CC.WEB-DL.AAC2.0.x264-monkee', 1, '||', 0, 0, 'http://lolo.sickbeard.com/getnzb/d39efe26d58145008703dad638db71d2.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393354, 64]
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Full.Frontal.with.Samantha.Bee.S03E23.720p.WEB-DL.AAC2.0.H.264-doosh
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Full Frontal with Samantha Bee
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Full.Frontal.with.Samantha.Bee']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Full.Frontal.with.Samantha.Bee.S03E23.720p.WEB-DL.AAC2.0.H.264-doosh', 3, '|23|', 0, 0, 'http://lolo.sickbeard.com/getnzb/68a55e84b2aa02e8c7c16b367bce2e27.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393354, 32]
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: VICE.News.Tonight.2018.09.26.720p.WEB-DL.AAC2.0.H.264-doosh
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of VICE News Tonight
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'VICE.News.Tonight']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['VICE.News.Tonight.2018.09.26.720p.WEB-DL.AAC2.0.H.264-doosh', 1, '||', 0, 0, 'http://lolo.sickbeard.com/getnzb/1d0f0b0b426837619771304ebff108ab.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393354, 32]
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: FBI.S01E01.HDTV.x264-SVA-postbot
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of FBI
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'FBI']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'FBI', u'FBI']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for FBI
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'FBI']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['FBI.S01E01.HDTV.x264-SVA-postbot', 1, '|1|', 0, 0, 'http://lolo.sickbeard.com/getnzb/5781b2be0d424e9e77333e5a2469e616.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393354, 1]
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: New.Amsterdam.2018.S01E01.HDTV.x264-KILLERS
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of New Amsterdam 2018
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'New.Amsterdam.2018']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'New Amsterdam 2018', u'New Amsterdam 2018']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match original name but trying to manually strip and specify show year
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE (show_name LIKE ? OR tvr_name LIKE ?) AND startyear = ? with args [u'New Amsterdam%', u'New Amsterdam%', u'2018']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for New Amsterdam 2018
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'New.Amsterdam.2018']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['New.Amsterdam.2018.S01E01.HDTV.x264-KILLERS', 1, '|1|', 0, 0, 'http://lolo.sickbeard.com/getnzb/53f9cf9daab743ca9b2a01d6ad59bb8f.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393354, 1]
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Bull.2016.S03E01.HDTV.x264-SVA-BUYMORE
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Bull 2016
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Bull.2016']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Bull 2016', u'Bull 2016']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match original name but trying to manually strip and specify show year
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE (show_name LIKE ? OR tvr_name LIKE ?) AND startyear = ? with args [u'Bull%', u'Bull%', u'2016']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Bull 2016
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Bull.2016']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Bull.2016.S03E01.HDTV.x264-SVA-BUYMORE', 3, '|1|', 0, 0, 'http://lolo.sickbeard.com/getnzb/8d26bc94483377c4b46cafddb47d1b5e.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393354, 1]
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: VICE.News.Tonight.2018.09.25.1080p.AMZN.WEB-DL.DDP2.0.H.264-monkee
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of VICE News Tonight
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'VICE.News.Tonight']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['VICE.News.Tonight.2018.09.25.1080p.AMZN.WEB-DL.DDP2.0.H.264-monkee', 1, '||', 0, 0, 'http://lolo.sickbeard.com/getnzb/430f6e420d3d0af430dedd6920345f60.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393354, 64]
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: 9-1-1.s02e01.hdtv.x264-lucidtv
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of 9-1-1
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'9-1-1']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'9 1 1', u'9 1 1']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for 9 1 1
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'9-1-1']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['9-1-1.s02e01.hdtv.x264-lucidtv', 2, '|1|', 0, 0, 'http://lolo.sickbeard.com/getnzb/a5c2faf6880edd993732f310022ac916.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393354, 1]
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: get.shorty.s02e08.720p.web.h264.tbs.UKSubs
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of get shorty
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'get.shorty']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'get shorty', u'get shorty']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for get shorty
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'get.shorty']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['get.shorty.s02e08.720p.web.h264.tbs.UKSubs', 2, '|8|', 0, 0, 'http://lolo.sickbeard.com/getnzb/49e108efeae982df7d4ac087616f9e80.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393354, 32768]
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: This.Is.Us.S03E01.720p.HDTV.x264.AVS.UKSubs
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of This Is Us
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'This.Is.Us']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'This Is Us', u'This Is Us']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for This Is Us
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'This.Is.Us']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['This.Is.Us.S03E01.720p.HDTV.x264.AVS.UKSubs', 3, '|1|', 0, 0, 'http://lolo.sickbeard.com/getnzb/a7eeaf86c70f14f6490eec857844dece.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393354, 4]
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Jim.Jefferies.Show.S02E22.Republicans.Stand.by.Brett.Kavanaugh.1080p.CC.WEB-DL.AAC2.0.x264-monkee
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Jim Jefferies Show
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Jim.Jefferies.Show']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Jim.Jefferies.Show.S02E22.Republicans.Stand.by.Brett.Kavanaugh.1080p.CC.WEB-DL.AAC2.0.x264-monkee', 2, '|22|', 0, 0, 'http://lolo.sickbeard.com/getnzb/dd1b2e4156f1d0a036bc863e64773bdd.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393354, 64]
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Daily.Show.with.Trevor.Noah.2018.09.25.M.I.A..1080p.CC.WEB-DL.AAC2.0.x264-monkee
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Daily Show with Trevor Noah
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Daily.Show.with.Trevor.Noah']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Daily.Show.with.Trevor.Noah.2018.09.25.M.I.A..1080p.CC.WEB-DL.AAC2.0.x264-monkee', 1, '||', 0, 0, 'http://lolo.sickbeard.com/getnzb/e78b2696d2a2c637e00c156a4caad2b7.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393354, 64]
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: VICE.News.Tonight.2018.09.25.720p.WEB-DL.AAC2.0.H.264-doosh
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of VICE News Tonight
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'VICE.News.Tonight']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['VICE.News.Tonight.2018.09.25.720p.WEB-DL.AAC2.0.H.264-doosh', 1, '||', 0, 0, 'http://lolo.sickbeard.com/getnzb/5b1fd50c4f157b4602fa4bd5b70f46a1.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393354, 32]
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Noma.Australia.S01E01.HDTV.x264-CBFM
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Noma Australia
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Noma.Australia']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Noma Australia', u'Noma Australia']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Noma Australia
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Noma.Australia']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Noma.Australia.S01E01.HDTV.x264-CBFM', 1, '|1|', 0, 0, 'http://lolo.sickbeard.com/getnzb/2b52a69350d3e83dd42cf747c94584d9.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393354, 1]
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: truly.madly.sweetly.2018.hdtv.x264-w4f-RakuvFIN
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to parse the filename truly.madly.sweetly.2018.hdtv.x264-w4f-RakuvFIN into a valid episode
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Giving up because I'm unable to parse this name: truly.madly.sweetly.2018.hdtv.x264-w4f-RakuvFIN
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Jamie.Cooks.Italy.S01E07.Rome.720p.AMZN.WEB-DL.AAC2.0.H.264-monkee
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Jamie Cooks Italy
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Jamie.Cooks.Italy']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Jamie Cooks Italy', u'Jamie Cooks Italy']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Jamie Cooks Italy
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Jamie.Cooks.Italy']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Jamie.Cooks.Italy.S01E07.Rome.720p.AMZN.WEB-DL.AAC2.0.H.264-monkee', 1, '|7|', 0, 0, 'http://lolo.sickbeard.com/getnzb/b9424baf9db45f6746f9e2d4838fd63f.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393354, 32]
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Jamie.Cooks.Italy.S01E07.Rome.1080p.AMZN.WEB-DL.AAC2.0.H.264-monkee
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Jamie Cooks Italy
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Jamie.Cooks.Italy']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Jamie.Cooks.Italy.S01E07.Rome.1080p.AMZN.WEB-DL.AAC2.0.H.264-monkee', 1, '|7|', 0, 0, 'http://lolo.sickbeard.com/getnzb/b8d8b347dcd65c7cc13ddb0cca94c207.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393354, 64]
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: VICE.News.Tonight.2018.09.24.1080p.AMZN.WEB-DL.DDP2.0.H.264-monkee
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of VICE News Tonight
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'VICE.News.Tonight']
2018-10-01 11:29:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['VICE.News.Tonight.2018.09.24.1080p.AMZN.WEB-DL.DDP2.0.H.264-monkee', 1, '||', 0, 0, 'http://lolo.sickbeard.com/getnzb/cabd398f2307d9b3309a4800425ea398.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393354, 64]
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Black.Earth.Rising.S01E03.A.Ghost.in.Name.720p.iP.WEB-DL.AAC2.0.H.264-RTN
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Black Earth Rising
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Black.Earth.Rising']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Black Earth Rising', u'Black Earth Rising']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Black Earth Rising
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Black.Earth.Rising']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Black.Earth.Rising.S01E03.A.Ghost.in.Name.720p.iP.WEB-DL.AAC2.0.H.264-RTN', 1, '|3|', 0, 0, 'http://lolo.sickbeard.com/getnzb/23c4be2f3ba44d76ed451529befac281.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393355, 32]
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Kidding.S01E03.PROPER.720p.AMZN.WEBRip.DDP5.1.x264-LFF
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Kidding
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Kidding']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Kidding', u'Kidding']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Kidding
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Kidding']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Kidding.S01E03.PROPER.720p.AMZN.WEBRip.DDP5.1.x264-LFF', 1, '|3|', 0, 0, 'http://lolo.sickbeard.com/getnzb/282f6e9fe50ad8303123b420d58e28c1.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393355, 32]
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Kidding.S01E03.PROPER.1080p.AMZN.WEBRip.DDP5.1.x264-LFF
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Kidding
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Kidding']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Kidding.S01E03.PROPER.1080p.AMZN.WEBRip.DDP5.1.x264-LFF', 1, '|3|', 0, 0, 'http://lolo.sickbeard.com/getnzb/093084dfd3c32da417b48fe9ab528bda.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393355, 64]
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Daily.Show.with.Trevor.Noah.2018.09.24.Jenny.Han.1080p.CC.WEB-DL.AAC2.0.x264-monkee
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Daily Show with Trevor Noah
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Daily.Show.with.Trevor.Noah']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Daily.Show.with.Trevor.Noah.2018.09.24.Jenny.Han.1080p.CC.WEB-DL.AAC2.0.x264-monkee', 1, '||', 0, 0, 'http://lolo.sickbeard.com/getnzb/d7142fa8289cdb68531039adb6ea6af3.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393355, 64]
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Better.Call.Saul.S04E08.Coushatta.REPACK.1080p.NF.WEB-DL.DDP5.1.x264-TOMMY
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Better Call Saul
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Better.Call.Saul']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Better Call Saul', u'Better Call Saul']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Better Call Saul
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Better.Call.Saul']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Better.Call.Saul.S04E08.Coushatta.REPACK.1080p.NF.WEB-DL.DDP5.1.x264-TOMMY', 4, '|8|', 0, 0, 'http://lolo.sickbeard.com/getnzb/2914356340e13c246a9d915163585419.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393355, 64]
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Better.Call.Saul.S04E08.Coushatta.720p.NF.WEB-DL.DDP5.1.x264-TOMMY
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Better Call Saul
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Better.Call.Saul']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Better.Call.Saul.S04E08.Coushatta.720p.NF.WEB-DL.DDP5.1.x264-TOMMY', 4, '|8|', 0, 0, 'http://lolo.sickbeard.com/getnzb/66f6d70c00840ceb4b01d14ad80e1535.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393355, 32]
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Better.Call.Saul.S04E08.Coushatta.1080p.NF.WEB-DL.DDP5.1.x264-TOMMY
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Better Call Saul
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Better.Call.Saul']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Better.Call.Saul.S04E08.Coushatta.1080p.NF.WEB-DL.DDP5.1.x264-TOMMY', 4, '|8|', 0, 0, 'http://lolo.sickbeard.com/getnzb/4d4c07b7ea6a919da9ad30ca07a23b0a.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393355, 64]
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: VICE.News.Tonight.2018.09.24.720p.WEB-DL.AAC2.0.H.264-doosh
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of VICE News Tonight
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'VICE.News.Tonight']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['VICE.News.Tonight.2018.09.24.720p.WEB-DL.AAC2.0.H.264-doosh', 1, '||', 0, 0, 'http://lolo.sickbeard.com/getnzb/99ad45931c6d84ac718fa92365ad88a7.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393355, 32]
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Last.Week.Tonight.with.John.Oliver.S05E23.1080p.AMZN.WEB-DL.DDP2.0.H.264-monkee
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Last Week Tonight with John Oliver
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Last.Week.Tonight.with.John.Oliver']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Last.Week.Tonight.with.John.Oliver.S05E23.1080p.AMZN.WEB-DL.DDP2.0.H.264-monkee', 5, '|23|', 0, 0, 'http://lolo.sickbeard.com/getnzb/6ac0ca5efcbc7d8255048d9ffac6724e.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393355, 64]
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Bodyguard.S01E06.1080p.HDTV.x264-KETTLE
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Bodyguard
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Bodyguard']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Bodyguard', u'Bodyguard']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Bodyguard
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Bodyguard']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Bodyguard.S01E06.1080p.HDTV.x264-KETTLE', 1, '|6|', 0, 0, 'http://lolo.sickbeard.com/getnzb/2926a1acce540ed45243346c9ed55cf3.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393355, 16]
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: YOU.2018.S01E01.Pilot.1080p.WEB-DL.DD5.1.H.264-PfXCPI
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of YOU 2018
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'YOU.2018']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'YOU 2018', u'YOU 2018']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match original name but trying to manually strip and specify show year
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE (show_name LIKE ? OR tvr_name LIKE ?) AND startyear = ? with args [u'YOU%', u'YOU%', u'2018']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for YOU 2018
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'YOU.2018']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['YOU.2018.S01E01.Pilot.1080p.WEB-DL.DD5.1.H.264-PfXCPI', 1, '|1|', 0, 0, 'http://lolo.sickbeard.com/getnzb/b125db6c3ae84c733863072dfaf45315.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393355, 64]
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: YOU.2018.S01E02.The.Last.Nice.Guy.in.New.York.1080p.WEB-DL.DD5.1.H.264-PfXCPI
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of YOU 2018
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'YOU.2018']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['YOU.2018.S01E02.The.Last.Nice.Guy.in.New.York.1080p.WEB-DL.DD5.1.H.264-PfXCPI', 1, '|2|', 0, 0, 'http://lolo.sickbeard.com/getnzb/3188cbe4d19ba2589b2097b08f946872.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393355, 64]
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: YOU.2018.S01E03.Maybe.1080p.WEB-DL.DD5.1.H.264-PfXCPI
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of YOU 2018
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'YOU.2018']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['YOU.2018.S01E03.Maybe.1080p.WEB-DL.DD5.1.H.264-PfXCPI', 1, '|3|', 0, 0, 'http://lolo.sickbeard.com/getnzb/2ba84d360a06cb558495272939a68a79.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393355, 64]
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Chesapeake.Shores.S03E08.All.Our.Tomorrows.720p.NF.WEB-DL.DDP5.1.x264-TOMMY
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Chesapeake Shores
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Chesapeake.Shores']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Chesapeake.Shores.S03E08.All.Our.Tomorrows.720p.NF.WEB-DL.DDP5.1.x264-TOMMY', 3, '|8|', 0, 0, 'http://lolo.sickbeard.com/getnzb/cd693d258ed184b2cedb10226070bff6.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393355, 32]
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Chesapeake.Shores.S03E08.All.Our.Tomorrows.1080p.NF.WEB-DL.DDP5.1.x264-TOMMY
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Chesapeake Shores
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Chesapeake.Shores']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Chesapeake.Shores.S03E08.All.Our.Tomorrows.1080p.NF.WEB-DL.DDP5.1.x264-TOMMY', 3, '|8|', 0, 0, 'http://lolo.sickbeard.com/getnzb/8456ec8b38a109667d02fc1fe3926e2a.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393355, 64]
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Last.Week.Tonight.with.John.Oliver.S05E23.720p.WEB-DL.AAC2.0.H.264-doosh
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Last Week Tonight with John Oliver
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Last.Week.Tonight.with.John.Oliver']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Last.Week.Tonight.with.John.Oliver.S05E23.720p.WEB-DL.AAC2.0.H.264-doosh', 5, '|23|', 0, 0, 'http://lolo.sickbeard.com/getnzb/84ffd1c766b73aaedac0fe57f36c8724.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393355, 32]
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Snowfall.S02E10.Education.720p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Snowfall
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Snowfall']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Snowfall', u'Snowfall']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Snowfall
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Snowfall']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Snowfall.S02E10.Education.720p.AMZN.WEB-DL.DDP5.1.H.264-NTb', 2, '|10|', 0, 0, 'http://lolo.sickbeard.com/getnzb/8ca88efd929c6a331b68c54e85cc4fc0.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393355, 32]
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Snowfall.S02E09.Aftermath.720p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Snowfall
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Snowfall']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Snowfall.S02E09.Aftermath.720p.AMZN.WEB-DL.DDP5.1.H.264-NTb', 2, '|9|', 0, 0, 'http://lolo.sickbeard.com/getnzb/12f10b84f2f117b3183f8d41ec143cdb.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393355, 32]
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Snowfall.S02E08.Surrender.720p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Snowfall
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Snowfall']
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO [sick_beard_index] (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Snowfall.S02E08.Surrender.720p.AMZN.WEB-DL.DDP5.1.H.264-NTb', 2, '|8|', 0, 0, 'http://lolo.sickbeard.com/getnzb/af2b4bbaf209b2d358760cd9e5334c23.nzb&i=0&r=f9c9e596a1b33ae68834e40fcb223271', 1538393355, 32]
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM [sick_beard_index]
2018-10-01 11:29:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Chesapeake.Shores.S03E09.Episode.9.720p.NF.WEB-DL.DDP5.1.x264-TOMMY
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Chesapeake.Shores.S03E09.Episode.9.1080p.NF.WEB-DL.DDP5.1.x264-TOMMY
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: James.Martins.Saturday.Morning.S02E03.720p.AMZN.WEB-DL.DDP2.0.H.264-monkee
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Only.Way.Is.Essex.S23E05.1080p.AMZN.WEB-DL.DDP2.0.H.264-NTb
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: James.Martins.Saturday.Morning.S02E03.1080p.AMZN.WEB-DL.DDP2.0.H.264-monkee
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Last.Week.Tonight.with.John.Oliver.S05E24.720p.WEB-DL.AAC2.0.H.264-doosh
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Deuce.S02E04.What.Big.Ideas.1080p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Crazy.Ex-Girlfriend.S02E05.Why.Is.Joshs.Ex-Girlfriend.Eating.Carbs.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Crazy.Ex-Girlfriend.S01E01.Josh.Just.Happens.to.Live.Here.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Crazy.Ex-Girlfriend.S02E13.Can.Josh.Take.a.Leap.of.Faith.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Crazy.Ex-Girlfriend.S02E12.Is.Josh.Free.in.Two.Weeks.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Crazy.Ex-Girlfriend.S02E11.Josh.Is.the.Man.of.My.Dreams.Right.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Crazy.Ex-Girlfriend.S02E10.Will.Scarsdale.Like.Joshs.Shayna.Punim.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Crazy.Ex-Girlfriend.S02E09.When.Do.I.Get.to.Spend.Time.with.Josh.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Crazy.Ex-Girlfriend.S02E08.Who.Is.Joshs.Soup.Fairy.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Crazy.Ex-Girlfriend.S02E07.Whos.the.Cool.Girl.Josh.Is.Dating.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Crazy.Ex-Girlfriend.S02E06.Who.Needs.Josh.When.You.Have.a.Girl.Group.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Crazy.Ex-Girlfriend.S02E04.When.Will.Josh.and.His.Friend.Leave.Me.Alone.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Crazy.Ex-Girlfriend.S02E03.All.Signs.Point.to.Josh.or.Is.It.Joshs.Friend.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Crazy.Ex-Girlfriend.S02E02.When.Will.Josh.See.How.Cool.I.Am.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Crazy.Ex-Girlfriend.S02E01.Where.Is.Joshs.Friend.1080p.NF.WEB-DL.DDP5.1.x264-CasStudio
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Deuce.S02E04.What.Big.Ideas.720p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Jim.Jefferies.Show.S02E22.Republicans.Stand.By.Brett.Kavanaugh.720p.AMZN.WEB-DL.DDP2.0.H.264-NTb
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Jim.Jefferies.Show.S02E22.Republicans.Stand.By.Brett.Kavanaugh.1080p.AMZN.WEB-DL.DDP2.0.H.264-NTb
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Imitation.Game.S01E05.1080p.AMZN.WEB-DL.DDP2.0.H.264-NTb
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: South.Park.S22E01.Dead.Kids.720p.AMZN.WEBRip.DDP2.0.x264-NTb
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: South.Park.S22E01.Dead.Kids.1080p.AMZN.WEB-DL.DDP2.0.H.264-NTb
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Shameless.US.S09E04.Do.Right.Vote.White.1080p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Crash.S01E01.Crash.1080p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Blue.Bloods.S09E01.Playing.With.Fire.720p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Blue.Bloods.S09E01.Playing.With.Fire.1080p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Back.to.Mine.Stay.For.Longer.S01E01.1080p.AMZN.WEB-DL.DDP2.0.H.264-NTb
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Back.To.Mine.S01E01.1080p.AMZN.WEB-DL.DDP2.0.H.264-NTb
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Absolutely.Ascot.S01E02.1080p.AMZN.WEB-DL.DDP2.0.H.264-NTb
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: I.Love.You.America.With.Sarah.Silverman.S01E14.18.Bill.Burr.720p.HULU.WEB-DL.AAC2.0.H.264-monkee
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: I.Love.You.America.With.Sarah.Silverman.S01E14.Bill.Burr.1080p.HULU.WEB-DL.AAC2.0.H.264-monkee
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Saturday.Night.Live.S44E01.Adam.Driver.Kanye.West.1080p.HULU.WEB-DL.AAC2.0.H.264-monkee
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Saturday.Night.Live.S44E01.Adam.Driver.Kanye.West.720p.WEB-DL.AAC2.0.H.264-doosh
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: A.Discovery.Of.Witches.S01E03.720p.HDTV.x264-MTB
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Real.Time.with.Bill.Maher.S16E29.Overtime.1080p.AMZN.WEB-DL.DDP2.0.H.264-monkee
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Real.Time.with.Bill.Maher.S16E29.1080p.AMZN.WEB-DL.DDP2.0.H.264-monkee
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Greys.Anatomy.S15E01.HDTV.x264-KILLERS
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Real.Time.with.Bill.Maher.S16E29.1080p.AMZN.WEB-DL.AAC2.0.H.264-monkee
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: CC.Stand-Up.S02E02.Megan.Gailey.1080p.CC.WEB-DL.AAC2.0.x264-monkee
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: CC.Stand-Up.S02E01.Langston.Kerman.1080p.CC.WEB-DL.AAC2.0.x264-monkee
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Real.Time.With.Bill.Maher.S16E29.Overtime.720p.WEB-DL.AAC2.0.H.264-Monkeeless
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Real.Time.With.Bill.Maher.S16E29.720p.WEB-DL.AAC2.0.H.264-doosh
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: South.Park.S22E01.Dead.Kids.1080p.AMZN.WEB-DL
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: strangers.s01e03.1080p.hdtv.x264.mtb.UKSubs
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: press.s01e04.1080p.hdtv.x264.mtb.UKSubs
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: VICE.News.Tonight.2018.09.27.1080p.AMZN.WEB-DL.DDP2.0.H.264-monkee
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Its.Always.Sunny.in.Philadelphia.S13E04.Times.Up.for.the.Gang.1080p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Its.Always.Sunny.in.Philadelphia.S13E04.Times.Up.for.the.Gang.720p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Modern.Family.S10E01.I.Love.a.Parade.REPACK.1080p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Modern.Family.S10E01.I.Love.a.Parade.REPACK.720p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Daily.Show.with.Trevor.Noah.2018.09.27.America.Ferrera.Extended.1080p.CC.WEB-DL.AAC2.0.x264-monkee
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Full.Frontal.with.Samantha.Bee.S03E23.REPACK.1080p.TBS.WEB-DL.AAC2.0.x264-monkee
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Shameless.US.S09E03.You.Havent.Done.This.Before.Have.You.720p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Mayans.M.C.S01E04.MurcielagoZotz.1080p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Mayans.M.C.S01E04.MurcielagoZotz.720p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: VICE.News.Tonight.2018.09.27.720p.WEB-DL.AAC2.0.H.264-doosh
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Full.Frontal.with.Samantha.Bee.S03E23.1080p.TBS.WEB-DL.AAC2.0.x264-monkee
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: VICE.News.Tonight.2018.09.26.1080p.AMZN.WEB-DL.DDP2.0.H.264-monkee
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Daily.Show.with.Trevor.Noah.2018.09.26.Bill.Gates.Extended.1080p.CC.WEB-DL.AAC2.0.x264-monkee
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Full.Frontal.with.Samantha.Bee.S03E23.720p.WEB-DL.AAC2.0.H.264-doosh
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: VICE.News.Tonight.2018.09.26.720p.WEB-DL.AAC2.0.H.264-doosh
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: FBI.S01E01.HDTV.x264-SVA-postbot
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: New.Amsterdam.2018.S01E01.HDTV.x264-KILLERS
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Bull.2016.S03E01.HDTV.x264-SVA-BUYMORE
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: VICE.News.Tonight.2018.09.25.1080p.AMZN.WEB-DL.DDP2.0.H.264-monkee
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: 9-1-1.s02e01.hdtv.x264-lucidtv
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: get.shorty.s02e08.720p.web.h264.tbs.UKSubs
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: This.Is.Us.S03E01.720p.HDTV.x264.AVS.UKSubs
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Jim.Jefferies.Show.S02E22.Republicans.Stand.by.Brett.Kavanaugh.1080p.CC.WEB-DL.AAC2.0.x264-monkee
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Daily.Show.with.Trevor.Noah.2018.09.25.M.I.A..1080p.CC.WEB-DL.AAC2.0.x264-monkee
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: VICE.News.Tonight.2018.09.25.720p.WEB-DL.AAC2.0.H.264-doosh
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Noma.Australia.S01E01.HDTV.x264-CBFM
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Jamie.Cooks.Italy.S01E07.Rome.720p.AMZN.WEB-DL.AAC2.0.H.264-monkee
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Jamie.Cooks.Italy.S01E07.Rome.1080p.AMZN.WEB-DL.AAC2.0.H.264-monkee
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: VICE.News.Tonight.2018.09.24.1080p.AMZN.WEB-DL.DDP2.0.H.264-monkee
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Black.Earth.Rising.S01E03.A.Ghost.in.Name.720p.iP.WEB-DL.AAC2.0.H.264-RTN
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Kidding.S01E03.PROPER.720p.AMZN.WEBRip.DDP5.1.x264-LFF
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Kidding.S01E03.PROPER.1080p.AMZN.WEBRip.DDP5.1.x264-LFF
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Daily.Show.with.Trevor.Noah.2018.09.24.Jenny.Han.1080p.CC.WEB-DL.AAC2.0.x264-monkee
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Better.Call.Saul.S04E08.Coushatta.REPACK.1080p.NF.WEB-DL.DDP5.1.x264-TOMMY
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Better.Call.Saul.S04E08.Coushatta.720p.NF.WEB-DL.DDP5.1.x264-TOMMY
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Better.Call.Saul.S04E08.Coushatta.1080p.NF.WEB-DL.DDP5.1.x264-TOMMY
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: VICE.News.Tonight.2018.09.24.720p.WEB-DL.AAC2.0.H.264-doosh
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Last.Week.Tonight.with.John.Oliver.S05E23.1080p.AMZN.WEB-DL.DDP2.0.H.264-monkee
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Bodyguard.S01E06.1080p.HDTV.x264-KETTLE
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: YOU.2018.S01E01.Pilot.1080p.WEB-DL.DD5.1.H.264-PfXCPI
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: YOU.2018.S01E02.The.Last.Nice.Guy.in.New.York.1080p.WEB-DL.DD5.1.H.264-PfXCPI
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: YOU.2018.S01E03.Maybe.1080p.WEB-DL.DD5.1.H.264-PfXCPI
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Chesapeake.Shores.S03E08.All.Our.Tomorrows.720p.NF.WEB-DL.DDP5.1.x264-TOMMY
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Chesapeake.Shores.S03E08.All.Our.Tomorrows.1080p.NF.WEB-DL.DDP5.1.x264-TOMMY
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Last.Week.Tonight.with.John.Oliver.S05E23.720p.WEB-DL.AAC2.0.H.264-doosh
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Snowfall.S02E10.Education.720p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Snowfall.S02E09.Aftermath.720p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Snowfall.S02E08.Surrender.720p.AMZN.WEB-DL.DDP5.1.H.264-NTb
2018-10-01 11:29:16 INFO     SEARCHQUEUE-RSS-SEARCH :: No needed episodes found on the RSS feeds
2018-10-01 11:30:23 INFO     MAIN :: Signal 15 caught, saving and exiting...
2018-10-01 11:30:23 INFO     MAIN :: Aborting all threads
2018-10-01 11:30:23 INFO     MAIN :: Waiting for the SEARCH thread to exit
2018-10-01 11:42:33 INFO     MAIN :: Checking database structure...
2018-10-01 11:42:33 DEBUG    MAIN :: Checking Initial Schema database upgrade
2018-10-01 11:42:33 DEBUG    MAIN :: sickbeard.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('tv_shows',)
2018-10-01 11:42:33 DEBUG    MAIN :: sickbeard.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('db_version',)
2018-10-01 11:42:33 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
2018-10-01 11:42:33 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
2018-10-01 11:42:33 DEBUG    MAIN :: Initial Schema upgrade not required
2018-10-01 11:42:33 DEBUG    MAIN :: Checking Add Size And Scene Name Fields database upgrade
2018-10-01 11:42:33 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
2018-10-01 11:42:33 DEBUG    MAIN :: Add Size And Scene Name Fields upgrade not required
2018-10-01 11:42:33 DEBUG    MAIN :: Checking Rename Season Folders database upgrade
2018-10-01 11:42:33 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
2018-10-01 11:42:33 DEBUG    MAIN :: Rename Season Folders upgrade not required
2018-10-01 11:42:33 DEBUG    MAIN :: Checking Add1080p And Raw Qualities database upgrade
2018-10-01 11:42:33 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
2018-10-01 11:42:33 DEBUG    MAIN :: Add1080p And Raw Qualities upgrade not required
2018-10-01 11:42:33 DEBUG    MAIN :: Checking Add Showid Tvdbid Index database upgrade
2018-10-01 11:42:33 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
2018-10-01 11:42:33 DEBUG    MAIN :: Add Showid Tvdbid Index upgrade not required
2018-10-01 11:42:33 DEBUG    MAIN :: Checking Add Last Update database upgrade
2018-10-01 11:42:33 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
2018-10-01 11:42:33 DEBUG    MAIN :: Add Last Update upgrade not required
2018-10-01 11:42:33 DEBUG    MAIN :: Checking Add Require And Ignore Words database upgrade
2018-10-01 11:42:33 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
2018-10-01 11:42:33 DEBUG    MAIN :: Add Require And Ignore Words upgrade not required
2018-10-01 11:42:33 DEBUG    MAIN :: Checking Cleanup History And Specials database upgrade
2018-10-01 11:42:33 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
2018-10-01 11:42:33 DEBUG    MAIN :: Cleanup History And Specials upgrade not required
2018-10-01 11:42:33 DEBUG    MAIN :: Checking Add Skip Notifications database upgrade
2018-10-01 11:42:33 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
2018-10-01 11:42:33 DEBUG    MAIN :: Add Skip Notifications upgrade not required
2018-10-01 11:42:33 DEBUG    MAIN :: Checking Add History Source database upgrade
2018-10-01 11:42:33 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
2018-10-01 11:42:33 DEBUG    MAIN :: Add History Source upgrade not required
2018-10-01 11:42:33 INFO     MAIN :: Checking database structure...
2018-10-01 11:42:33 DEBUG    MAIN :: Checking Initial Schema database upgrade
2018-10-01 11:42:33 DEBUG    MAIN :: cache.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('lastUpdate',)
2018-10-01 11:42:33 DEBUG    MAIN :: Initial Schema upgrade not required
2018-10-01 11:42:33 DEBUG    MAIN :: Checking Add Scene Exceptions database upgrade
2018-10-01 11:42:33 DEBUG    MAIN :: cache.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('scene_exceptions',)
2018-10-01 11:42:33 DEBUG    MAIN :: Add Scene Exceptions upgrade not required
2018-10-01 11:42:33 DEBUG    MAIN :: Checking Add Scene Name Cache database upgrade
2018-10-01 11:42:33 DEBUG    MAIN :: cache.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('scene_names',)
2018-10-01 11:42:33 DEBUG    MAIN :: Add Scene Name Cache upgrade not required
2018-10-01 11:42:33 DEBUG    MAIN :: Checking Add Scene Exceptions Provider database upgrade
2018-10-01 11:42:33 DEBUG    MAIN :: Add Scene Exceptions Provider upgrade not required
2018-10-01 11:42:33 DEBUG    MAIN :: sickbeard.db: SELECT show_id, tvdb_id, COUNT(tvdb_id) as count FROM tv_shows GROUP BY tvdb_id HAVING count > 1
2018-10-01 11:42:33 INFO     MAIN :: No duplicate show, check passed
2018-10-01 11:42:33 DEBUG    MAIN :: sickbeard.db: SELECT showid, season, episode, COUNT(showid) as count FROM tv_episodes GROUP BY showid, season, episode HAVING count > 1
2018-10-01 11:42:33 INFO     MAIN :: No duplicate episode, check passed
2018-10-01 11:42:33 DEBUG    MAIN :: sickbeard.db: SELECT episode_id, showid, tv_shows.tvdb_id FROM tv_episodes LEFT JOIN tv_shows ON tv_episodes.showid=tv_shows.tvdb_id WHERE tv_shows.tvdb_id is NULL
2018-10-01 11:42:33 INFO     MAIN :: No orphan episodes, check passed
2018-10-01 11:42:33 DEBUG    MAIN :: config_version -> 6
2018-10-01 11:42:33 DEBUG    MAIN :: Checking if we can use git commands: git version
2018-10-01 11:42:33 DEBUG    MAIN :: Executing git version with your shell in /app/sickbeard
2018-10-01 11:42:33 DEBUG    MAIN :: git output: git version 2.13.5
2018-10-01 11:42:33 DEBUG    MAIN :: git version : returned successful
2018-10-01 11:42:34 DEBUG    MAIN :: Using: git
2018-10-01 11:42:34 DEBUG    MAIN :: Executing git symbolic-ref -q HEAD with your shell in /app/sickbeard
2018-10-01 11:42:34 DEBUG    MAIN :: git output: refs/heads/development
2018-10-01 11:42:34 DEBUG    MAIN :: git symbolic-ref -q HEAD : returned successful
2018-10-01 11:42:34 DEBUG    MAIN :: Retrieving the last check time from the DB
2018-10-01 11:42:34 DEBUG    MAIN :: sickbeard.db: SELECT * FROM info
2018-10-01 11:42:34 INFO     MAIN :: Starting Sick Beard on http://0.0.0.0:8081/
2018-10-01 11:42:34 INFO     MAIN :: Loading initial show list
2018-10-01 11:42:34 DEBUG    MAIN :: sickbeard.db: SELECT * FROM tv_shows
2018-10-01 11:42:34 DEBUG    CHECKVERSION :: Starting new thread: CHECKVERSION
2018-10-01 11:42:34 INFO     CHECKVERSION :: Checking if git needs an update
2018-10-01 11:42:34 DEBUG    CHECKVERSION :: Executing git rev-parse HEAD with your shell in /app/sickbeard
2018-10-01 11:42:34 DEBUG    CHECKVERSION :: git output: 171a607e41b7347a74cc815f6ecce7968d9acccf
2018-10-01 11:42:34 DEBUG    CHECKVERSION :: git rev-parse HEAD : returned successful
2018-10-01 11:42:34 DEBUG    CHECKVERSION :: Executing git fetch origin with your shell in /app/sickbeard
2018-10-01 11:42:34 DEBUG    CHECKVERSION :: git output: 
2018-10-01 11:42:34 DEBUG    CHECKVERSION :: git fetch origin : returned successful
2018-10-01 11:42:34 DEBUG    CHECKVERSION :: Executing git rev-parse --verify --quiet "@{upstream}" with your shell in /app/sickbeard
2018-10-01 11:42:34 DEBUG    CHECKVERSION :: git output: 171a607e41b7347a74cc815f6ecce7968d9acccf
2018-10-01 11:42:34 DEBUG    CHECKVERSION :: git rev-parse --verify --quiet "@{upstream}" : returned successful
2018-10-01 11:42:34 DEBUG    CHECKVERSION :: Executing git rev-list --left-right "@{upstream}"...HEAD with your shell in /app/sickbeard
2018-10-01 11:42:34 DEBUG    CHECKVERSION :: git output: 
2018-10-01 11:42:34 DEBUG    CHECKVERSION :: git rev-list --left-right "@{upstream}"...HEAD : returned successful
2018-10-01 11:42:34 DEBUG    CHECKVERSION :: cur_commit = 171a607e41b7347a74cc815f6ecce7968d9acccf, newest_commit = 171a607e41b7347a74cc815f6ecce7968d9acccf, num_commits_behind = 0, num_commits_ahead = 0
2018-10-01 11:42:34 INFO     CHECKVERSION :: No update needed
2018-10-01 11:42:34 INFO     CHECKVERSION :: Check scene exceptions update
2018-10-01 11:42:34 DEBUG    CHECKVERSION :: cache.db: SELECT tvdb_id, show_name FROM scene_exceptions WHERE provider=?; with args ['sb_tvdb_scene_exceptions']
2018-10-01 11:42:35 INFO     CHECKVERSION :: No scene exceptions update needed
2018-10-01 11:43:14 DEBUG    CP Server Thread-4 :: sickbeard.db: SELECT showid, (SELECT COUNT(*) FROM tv_episodes WHERE showid=tv_eps.showid AND season > 0 AND episode > 0 AND status IN (2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409)) AS ep_snatched, (SELECT COUNT(*) FROM tv_episodes WHERE showid=tv_eps.showid AND season > 0 AND episode > 0 AND status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,6)) AS ep_downloaded, (SELECT COUNT(*) FROM tv_episodes WHERE showid=tv_eps.showid AND season > 0 AND episode > 0  AND ((airdate > 1 AND airdate <= 736968 AND (status = 5 OR status = 3))  OR (status IN (2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409)) OR (status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,6)))) AS ep_total,  (SELECT airdate FROM tv_episodes WHERE showid=tv_eps.showid AND airdate >= 736968 AND status = 1 ORDER BY airdate ASC LIMIT 1) AS ep_airs_next  FROM tv_episodes tv_eps GROUP BY showid
2018-10-01 11:43:14 DEBUG    CP Server Thread-4 :: sickbeard.db: SELECT (SELECT COUNT(*) FROM tv_episodes WHERE season > 0 AND episode > 0 AND status IN (2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409)) AS ep_snatched, (SELECT COUNT(*) FROM tv_episodes WHERE season > 0 AND episode > 0 AND status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,6)) AS ep_downloaded, (SELECT COUNT(*) FROM tv_episodes WHERE season > 0 AND episode > 0  AND ((airdate > 1 AND airdate <= 736968 AND (status = 5 OR status = 3))  OR (status IN (2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409)) OR (status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,6)))) AS ep_total  FROM tv_episodes tv_eps LIMIT 1
2018-10-01 11:43:30 INFO     MAIN :: Signal 15 caught, saving and exiting...
2018-10-01 11:43:30 INFO     MAIN :: Aborting all threads
2018-10-01 11:43:30 INFO     MAIN :: Waiting for the SEARCH thread to exit
2018-10-01 11:43:31 INFO     MAIN :: Waiting for the BACKLOG thread to exit
2018-10-01 11:43:32 INFO     MAIN :: Waiting for the SHOWUPDATER thread to exit
2018-10-01 11:43:32 INFO     MAIN :: Waiting for the VERSIONCHECKER thread to exit
